plotSettings$color[which(plotSettings$names=="Pollen (not calibrated)")] <- "yellowgreen"
plotSettings$color[which(plotSettings$names=="Speleothem (other)")]      <- "darkorange"
plotSettings$color[which(plotSettings$names=="Speleothem (δ13C)")]       <- "lightcoral"
plotSettings$color[which(plotSettings$names=="Speleothem (δ18O)")]       <- "firebrick"
#
plotSettings$shape <- as.character(plotSettings$names)
plotSettings$shape[which(plotSettings$names=="Glacial Ice (Accumulation)")] <- 12
plotSettings$shape[which(plotSettings$names=="Shoreline (Lake Level)")]  <- 21
plotSettings$shape[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- 15
plotSettings$shape[which(plotSettings$names=="Leaf Wax (δD)")]           <- 5
plotSettings$shape[which(plotSettings$names=="Other (calibrated)")]      <- 6
plotSettings$shape[which(plotSettings$names=="Other (not calibrated)")]  <- 13
plotSettings$shape[which(plotSettings$names=="Pollen (calibrated)")]     <- 14
plotSettings$shape[which(plotSettings$names=="Pollen (not calibrated)")] <- 1
plotSettings$shape[which(plotSettings$names=="Speleothem (other)")]      <- 17
plotSettings$shape[which(plotSettings$names=="Speleothem (δ13C)")]       <- 23
plotSettings$shape[which(plotSettings$names=="Speleothem (δ18O)")]       <- 11
} else{
plotSettings$names <- sort(unique(proxyDf$Category))
#
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="Glacier Ice")]             <- "powder blue"
plotSettings$color[which(plotSettings$names=="Shoreline")]               <- "corn flower blue"
plotSettings$color[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- "dark blue"
plotSettings$color[which(plotSettings$names=="Leaf Wax (δD)")]           <- "dark orchid"
plotSettings$color[which(plotSettings$names=="Other")]                   <- "grey"
plotSettings$color[which(plotSettings$names=="Pollen")]                  <- "forest green"
plotSettings$color[which(plotSettings$names=="Speleothem")]              <- "firebrick"
#
plotSettings$shape <- as.character(plotSettings$names)
plotSettings$shape[which(plotSettings$names=="Glacier Ice")]             <- 12
plotSettings$shape[which(plotSettings$names=="Shoreline")]               <- 21
plotSettings$shape[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- 15
plotSettings$shape[which(plotSettings$names=="Leaf Wax (δD)")]           <- 5
plotSettings$shape[which(plotSettings$names=="Other")]                   <- 13
plotSettings$shape[which(plotSettings$names=="Pollen")]                  <- 14
plotSettings$shape[which(plotSettings$names=="Speleothem")]              <- 11
}
} else if (var == 'T'){
plotSettings$names <- sort(unique(proxyDf$Category))
#
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="alkenone")]          <- "tomato"
plotSettings$color[which(plotSettings$names=="biophysical")]       <- "skyblue4"
plotSettings$color[which(plotSettings$names=="chironomid")]        <- "firebrick"
plotSettings$color[which(plotSettings$names=="isotope")]           <- "orange"
plotSettings$color[which(plotSettings$names=="Mg/Ca")]             <- "midnight blue"
plotSettings$color[which(plotSettings$names=="other biomarker")]   <- "medium blue"
plotSettings$color[which(plotSettings$names=="other ice")]         <- "powder blue"
plotSettings$color[which(plotSettings$names=="other microfossil")] <- "plum4"
plotSettings$color[which(plotSettings$names=="pollen")]            <- "forest green"
#
plotSettings$color[which(plotSettings$names=="alkenone")]          <- 22
plotSettings$color[which(plotSettings$names=="biophysical")]       <- 1
plotSettings$color[which(plotSettings$names=="chironomid")]        <- 30
plotSettings$color[which(plotSettings$names=="isotope")]           <- 15
plotSettings$color[which(plotSettings$names=="Mg/Ca")]             <- 25
plotSettings$color[which(plotSettings$names=="other biomarker")]   <- 13
plotSettings$color[which(plotSettings$names=="other ice")]         <- 12
plotSettings$color[which(plotSettings$names=="other microfossil")] <- 5
plotSettings$color[which(plotSettings$names=="pollen")]            <- 14
}
plotSettings$shape <- as.numeric(plotSettings$shape)
regionsSelect <- vector(mode='list')
regionsSelect$all       <- refregions
regionsSelect$select    <- subset(refregions, Acronym %in% proxyDf$ipccReg)
regionsSelect$composite <- subset(refregions, Acronym %in% colnames(read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))))
library(ggplot2)
basemap <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(refregions, FUN=length), fill=NA, colour='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", colour="white", size=1)+
#Add Country data (basemap)
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
basemap
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
Data <- vector(mode='list')
Data$proxy <- read.csv(file.path(dir,'Data','RegionComposites',var,'MedianTS_byRegion.csv'))
#for (model in c('trace','hadcm','cmip6')){
# Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
#                                   paste('regional_',modelVar,'_',model,'.csv',sep='')))
#}
regionData <- readRDS(file.path(dir,'Data','FigureSettings','regionData.rds'))
regionData[['GIC']]$xadjust  <-  -0.01
regionData[['NEU']]$xadjust  <-  0.0
regionData[['NEU']]$yadjust  <-  0.01
regionData[['WCE']]$xadjust  <- -0.02
regionData[['WSB']]$xadjust <-  -0.035
regionData[['WSB']]$yadjust <-  0.015
regionData[['RFE']]$xadjust <- 0.01
regionData[['RFE']]$yadjust <- -0.03
regionData[['EAN']]$yadjust <- 0.01
regNames <-names(Data$proxy)[-1]
binvec <- Data$proxy$time
if (var=='T'){ Csettings  <- c("#fddbc7","#d6604d","#b2182b") #reds
}else{
Csettings <- c("#ebfaeb","#145214","#0a290a") #greens
Csettings <- c("#f6e8c3","#bf812d","#8c510a") #yellows
Csettings <- c("#E1E6EA","#8599AB",'#434D55') #Blues
}
Csettings <- c("#80DBF1","#253DA1",'#000137') #Blues
Chadcm <- '#AB8599'
Ctrace <- '#99AB85'
alph<-0.8
map<- ggdraw(basemap) #+ borders(database = regionsSelect$composite, fill=NA, colour='grey40',size=0.1))
for (reg in regNames){
#Load Data for Region
regTso   <- regionData[[reg]][[var]][["LiPD"]]
regEnsNA <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
scaleVal <- 1
if (var == 'HC'){scaleVal <- 30}
hadcmVals <- (Data[['hadcm']][[reg]]-mean(Data[['hadcm']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
traceVals <- (Data[['trace']][[reg]]-mean(Data[['trace']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
#Standardize mean at 0
regEnsNA <- as.matrix(regEnsNA - as.numeric(apply(regEnsNA[which(between(binvec,0,500)),],2,mean,na.rm=TRUE)))
#if (var == 'HC'){
# regEnsNA <- regEnsNA / as.numeric(apply(regEnsNA,2,sd,na.rm=TRUE))
#if (!is.na(modelVar)){regEnsNA <- regEnsNA * mean(sd(traceVals,na.rm=TRUE),sd(hadcmVals,na.rm=TRUE))}
#}
regEns   <- matrix(NA,nrow(regEnsNA),ncol(regEnsNA))
regEns[regionData[[reg]][[var]][["pltTimeAvail50range"]],] <- regEnsNA[regionData[[reg]][[var]][["pltTimeAvail50range"]],]
plotlimit_set <- max(abs(regEns),na.rm=TRUE)
regPlt <- ggdraw(ggplot()+theme_void()+theme(plot.background= element_rect(colour='White',fill='White')))
compBands <- vector(mode = 'list')
compBands$na <-  plotTimeseriesEnsRibbons(ggplot()+geom_hline(yintercept=0,size=0.05,color='black'),
X=timeN$yvec, Y=regEnsNA, alp=alph,line.width=0.1,
color.low='grey90',
color.high='grey50',
color.line='grey20')
compBands$ts <- plotTimeseriesEnsRibbons(X=timeN$yvec, Y=regEns, alp=alph-0.2,line.width=0.1,
color.low=Csettings[1],
color.high=Csettings[2],
color.line=Csettings[3])
if (!is.na(modelVar)){
plotlimit_set <- max(abs(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],apply(regEns,1,mean))),na.rm=TRUE)*1.2
compBands$ts <- compBands$ts + geom_hline(yintercept=0,size=0.05,color='black') +
geom_line(aes(x=binvec[which(between(binvec,0,12000))],y=hadcmVals),color=Chadcm,size=0.3,alpha=alph)+
geom_line(aes(x=binvec[which(between(binvec,0,12000))],y=traceVals),color=Ctrace,size=0.3,alpha=alph)+
geom_boxplot(aes(x=6000,y=Data[['cmip6']][[reg]]*scaleVal),width=1000,size=0.1,alpha=alph,
outlier.size=0.5,outlier.stroke = 0.15,outlier.alpha=1,outlier.colour='Black')
}
for (plt in names(compBands)){
compBands[[plt]] <- compBands[[plt]] +
scale_x_reverse(limits=c(12100,-100), expand=c(0,0), n.breaks=7,sec.axis = dup_axis())+
scale_y_continuous(limits=c(plotlimit_set*c(-1000,1000)),breaks=seq(-100,100,2),sec.axis = dup_axis())+
coord_cartesian(xlim=c(12000,0), ylim=c(plotlimit_set*c(-1,1))) +
theme_void() +
theme(panel.border    = element_rect(color='Black',fill=NA,size=0.5),
axis.ticks      = element_line(color='Black',size=0.1),
axis.ticks.length = unit(-1,"pt"),
plot.margin       = unit(c(0, 0, 0, 0), "in"), legend.position='none')
regPlt <- regPlt + draw_plot(compBands[[plt]], x = 0, y = 0, width = 1, height = 1)
}
plotLat <- regionData[[reg]][["latitude"]]
plotLon <- regionData[[reg]][["longitude"]]
if (is.na(regionData[[reg]]$xadjust)){regionData[[reg]]$xadjust <- 0}
if (is.na(regionData[[reg]]$yadjust)){regionData[[reg]]$yadjust <- 0}
map <- map + draw_plot(regPlt,width = xSize, height = ySize,
x = regionData[[reg]]$xadjust+(0.5-xSize/2)+0.5*plotLat/(9050504*2),
y = regionData[[reg]]$yadjust+(0.5-ySize/2)+0.92*plotLon/(8625155*2),
)
}
#Load Data for Region
regTso   <- regionData[[reg]][[var]][["LiPD"]]
regEnsNA <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
scaleVal <- 1
if (var == 'HC'){scaleVal <- 30}
hadcmVals <- (Data[['hadcm']][[reg]]-mean(Data[['hadcm']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
traceVals <- (Data[['trace']][[reg]]-mean(Data[['trace']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
if (var == 'HC'){scaleVal <- 30}
#hadcmVals <- (Data[['hadcm']][[reg]]-mean(Data[['hadcm']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
#traceVals <- (Data[['trace']][[reg]]-mean(Data[['trace']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
#Standardize mean at 0
regEnsNA <- as.matrix(regEnsNA - as.numeric(apply(regEnsNA[which(between(binvec,0,500)),],2,mean,na.rm=TRUE)))
#if (var == 'HC'){
# regEnsNA <- regEnsNA / as.numeric(apply(regEnsNA,2,sd,na.rm=TRUE))
#if (!is.na(modelVar)){regEnsNA <- regEnsNA * mean(sd(traceVals,na.rm=TRUE),sd(hadcmVals,na.rm=TRUE))}
#}
regEns   <- matrix(NA,nrow(regEnsNA),ncol(regEnsNA))
regEns[regionData[[reg]][[var]][["pltTimeAvail50range"]],] <- regEnsNA[regionData[[reg]][[var]][["pltTimeAvail50range"]],]
plotlimit_set <- max(abs(regEns),na.rm=TRUE)
regPlt <- ggdraw(ggplot()+theme_void()+theme(plot.background= element_rect(colour='White',fill='White')))
compBands <- vector(mode = 'list')
compBands$na <-  plotTimeseriesEnsRibbons(ggplot()+geom_hline(yintercept=0,size=0.05,color='black'),
X=timeN$yvec, Y=regEnsNA, alp=alph,line.width=0.1,
color.low='grey90',
color.high='grey50',
color.line='grey20')
for (reg in regNames){
#Load Data for Region
regTso   <- regionData[[reg]][[var]][["LiPD"]]
regEnsNA <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
scaleVal <- 1
if (var == 'HC'){scaleVal <- 30}
#hadcmVals <- (Data[['hadcm']][[reg]]-mean(Data[['hadcm']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
#traceVals <- (Data[['trace']][[reg]]-mean(Data[['trace']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
#Standardize mean at 0
regEnsNA <- as.matrix(regEnsNA - as.numeric(apply(regEnsNA[which(between(binvec,0,500)),],2,mean,na.rm=TRUE)))
#if (var == 'HC'){
# regEnsNA <- regEnsNA / as.numeric(apply(regEnsNA,2,sd,na.rm=TRUE))
#if (!is.na(modelVar)){regEnsNA <- regEnsNA * mean(sd(traceVals,na.rm=TRUE),sd(hadcmVals,na.rm=TRUE))}
#}
regEns   <- matrix(NA,nrow(regEnsNA),ncol(regEnsNA))
regEns[regionData[[reg]][[var]][["pltTimeAvail50range"]],] <- regEnsNA[regionData[[reg]][[var]][["pltTimeAvail50range"]],]
plotlimit_set <- max(abs(regEns),na.rm=TRUE)
regPlt <- ggdraw(ggplot()+theme_void()+theme(plot.background= element_rect(colour='White',fill='White')))
compBands <- vector(mode = 'list')
compBands$na <-  plotTimeseriesEnsRibbons(ggplot()+geom_hline(yintercept=0,size=0.05,color='black'),
X=binvec, Y=regEnsNA, alp=alph,line.width=0.1,
color.low='grey90',
color.high='grey50',
color.line='grey20')
compBands$ts <- plotTimeseriesEnsRibbons(X=binvec, Y=regEns, alp=alph-0.2,line.width=0.1,
color.low=Csettings[1],
color.high=Csettings[2],
color.line=Csettings[3])
if (!is.na(modelVar)){
plotlimit_set <- max(abs(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],apply(regEns,1,mean))),na.rm=TRUE)*1.2
compBands$ts <- compBands$ts + geom_hline(yintercept=0,size=0.05,color='black') +
geom_line(aes(x=binvec[which(between(binvec,0,12000))],y=hadcmVals),color=Chadcm,size=0.3,alpha=alph)+
geom_line(aes(x=binvec[which(between(binvec,0,12000))],y=traceVals),color=Ctrace,size=0.3,alpha=alph)+
geom_boxplot(aes(x=6000,y=Data[['cmip6']][[reg]]*scaleVal),width=1000,size=0.1,alpha=alph,
outlier.size=0.5,outlier.stroke = 0.15,outlier.alpha=1,outlier.colour='Black')
}
for (plt in names(compBands)){
compBands[[plt]] <- compBands[[plt]] +
scale_x_reverse(limits=c(12100,-100), expand=c(0,0), n.breaks=7,sec.axis = dup_axis())+
scale_y_continuous(limits=c(plotlimit_set*c(-1000,1000)),breaks=seq(-100,100,2),sec.axis = dup_axis())+
coord_cartesian(xlim=c(12000,0), ylim=c(plotlimit_set*c(-1,1))) +
theme_void() +
theme(panel.border    = element_rect(color='Black',fill=NA,size=0.5),
axis.ticks      = element_line(color='Black',size=0.1),
axis.ticks.length = unit(-1,"pt"),
plot.margin       = unit(c(0, 0, 0, 0), "in"), legend.position='none')
regPlt <- regPlt + draw_plot(compBands[[plt]], x = 0, y = 0, width = 1, height = 1)
}
plotLat <- regionData[[reg]][["latitude"]]
plotLon <- regionData[[reg]][["longitude"]]
if (is.na(regionData[[reg]]$xadjust)){regionData[[reg]]$xadjust <- 0}
if (is.na(regionData[[reg]]$yadjust)){regionData[[reg]]$yadjust <- 0}
map <- map + draw_plot(regPlt,width = xSize, height = ySize,
x = regionData[[reg]]$xadjust+(0.5-xSize/2)+0.5*plotLat/(9050504*2),
y = regionData[[reg]]$yadjust+(0.5-ySize/2)+0.92*plotLon/(8625155*2),
)
}
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
for (model in c('trace','hadcm','cmip6')){
Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
}
modelVar <- NA
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
modelVar <- 'p-e_ANN'
Data$proxy <- read.csv(file.path(dir,'Data','RegionComposites',var,'MedianTS_byRegion.csv'))
if (is.na(modelVar)){
for (model in c('trace','hadcm','cmip6')){
Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
}
}
Data[[model]]
read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
if (is.na(modelVar)){
for (model in c('trace','hadcm','cmip6')){
Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
}
}
regionData <- readRDS(file.path(dir,'Data','FigureSettings','regionData.rds'))
regionData[['GIC']]$xadjust  <-  -0.01
regionData[['NEU']]$xadjust  <-  0.0
regionData[['NEU']]$yadjust  <-  0.01
regionData[['WCE']]$xadjust  <- -0.02
regionData[['WSB']]$xadjust <-  -0.035
regionData[['WSB']]$yadjust <-  0.015
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
hadcmVals <- (Data[['hadcm']][[reg]]-mean(Data[['hadcm']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
Data[['hadcm']][[reg]]
reg
names(Data[['hadcm']])
View(Data)
modelVar <- 'p-e_ANN'
if (is.na(modelVar)){
for (model in c('trace','hadcm','cmip6')){
Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
}
}
modelVar <- 'p-e_ANN'
View(Data)
Data <- vector(mode='list')
Data$proxy <- read.csv(file.path(dir,'Data','RegionComposites',var,'MedianTS_byRegion.csv'))
if (is.na(modelVar)){
for (model in c('trace','hadcm','cmip6')){
Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
}
}
names(Data)
Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
names(Data)
for (model in c('trace','hadcm','cmip6')){
Data[[model]]<- read.csv(file.path(dir,'Data','Model','RegionTS',
paste('regional_',modelVar,'_',model,'.csv',sep='')))
}
names(Data)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
max(abs(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],apply(regEns,1,mean))),na.rm=TRUE)
range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],apply(regEns,1,mean))),na.rm=TRUE)
range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],apply(regEns,1,mean)),na.rm=TRUE)
plotlimit_set <- range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],apply(regEns,1,mean)),na.rm=TRUE)
c(max(abs(plotlimit_set))*c(-1,1))
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
plotlimit_set
plotlimit_set <- c(range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],apply(regEns,1,mean)),na.rm=TRUE))
plotlimit_set
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
?coord_cartesian
plotlimit_set
plotlimit_set + c(1,2)
plotlimit_set + c(-1,-1)
plotlimit_set + c(-1,1)
plotlimit_set + plotlimit_set *0.05
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
Data[['cmip6']][[reg]]
apply(regEns,1,mean))
apply(regEns,1,mean)
apply(regEns,1,sd)
apply(regEns,1,mean,na.rm=TRUE),apply(regEns,1,sd)
apply(regEnsNA,1,mean),apply(regEns,1,sd)
apply(regEnsNA,1,mean,na.rm=TRUE)
apply(regEnsNA,1,sd,na.rm=TRUE)
apply(regEnsNA,1,mean,na.rm=TRUE)+apply(regEnsNA,1,sd,na.rm=TRUE)*(c-1,1)
apply(regEnsNA,1,mean,na.rm=TRUE)+apply(regEnsNA,1,sd,na.rm=TRUE)*c(-1,1)
apply(regEnsNA,1,mean,na.rm=TRUE)+apply(regEnsNA,2,sd,na.rm=TRUE)*c(-1,1)
apply(regEnsNA,1,mean,na.rm=TRUE)+apply(regEnsNA,1,sd,na.rm=TRUE)*c(-1,1)
apply(regEnsNA,1,sd,na.rm=TRUE)*c(-1,1)
apply(regEnsNA,1,mean,na.rm=TRUE)+apply(regEnsNA,1,sd,na.rm=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],
apply(regEns,1,mean)+apply(regEns,1,sd),apply(regEns,1,mean)-apply(regEns,1,sd)
))
range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],
apply(regEns,1,mean)+apply(regEns,1,sd),apply(regEns,1,mean)-apply(regEns,1,sd)
))
reg<-'SAH'
#Load Data for Region
regTso   <- regionData[[reg]][[var]][["LiPD"]]
regEnsNA <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
scaleVal <- 1
if (var == 'HC'){scaleVal <- 30}
hadcmVals <- (Data[['hadcm']][[reg]]-mean(Data[['hadcm']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
traceVals <- (Data[['trace']][[reg]]-mean(Data[['trace']][1:5,reg],na.rm=TRUE))[1:121]*scaleVal
#Standardize mean at 0
regEnsNA <- as.matrix(regEnsNA - as.numeric(apply(regEnsNA[which(between(binvec,0,500)),],2,mean,na.rm=TRUE)))
#if (var == 'HC'){
# regEnsNA <- regEnsNA / as.numeric(apply(regEnsNA,2,sd,na.rm=TRUE))
#if (!is.na(modelVar)){regEnsNA <- regEnsNA * mean(sd(traceVals,na.rm=TRUE),sd(hadcmVals,na.rm=TRUE))}
#}
regEns   <- matrix(NA,nrow(regEnsNA),ncol(regEnsNA))
regEns[regionData[[reg]][[var]][["pltTimeAvail50range"]],] <- regEnsNA[regionData[[reg]][[var]][["pltTimeAvail50range"]],]
plotlimit_set <- max(abs(regEns),na.rm=TRUE)
regPlt <- ggdraw(ggplot()+theme_void()+theme(plot.background= element_rect(colour='White',fill='White')))
compBands <- vector(mode = 'list')
compBands$na <-  plotTimeseriesEnsRibbons(ggplot()+geom_hline(yintercept=0,size=0.05,color='black'),
X=binvec, Y=regEnsNA, alp=alph,line.width=0.1,
color.low='grey90',
color.high='grey50',
color.line='grey20')
compBands$ts <- plotTimeseriesEnsRibbons(X=binvec, Y=regEns, alp=alph-0.2,line.width=0.1,
color.low=Csettings[1],
color.high=Csettings[2],
color.line=Csettings[3])
plotlimit_set <- range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],
apply(regEns,1,mean)+apply(regEns,1,sd),apply(regEns,1,mean)-apply(regEns,1,sd)
))
plotlimit_set
apply(regEns,1,mean)+apply(regEns,1,sd)
apply(regEns,1,mean)-apply(regEns,1,sd)
plotlimit_set <- range(c(traceVals,hadcmVals,Data[['cmip6']][[reg]],
apply(regEns,1,mean,na.rm=TRUE)+apply(regEns,1,sd,na.rm=TRUE),apply(regEns,1,mean,na.rm=TRUE)-apply(regEns,1,sd,na.rm=TRUE)
),na.rm=TRUE)
plotlimit_set
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
range(plotlimit_set)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
Data[['cmip6']][[reg]]
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
map3
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
library(cowplot)
library(egg)
library(geoChronR)
library(ggrepel)
library(ggplot2)
library(ggstar)
library(lipdR)
library(maptools)
library(proj4)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(sp)
library(tidyverse)
save     <- FALSE
pieData <- proxyDf %>% group_by(source) %>% summarise(n = n())
names <- as.character(pieData$source)
names[which(names=='Arctic Holocene')]             <- 'Arctic Holocene (Sundqvist et al., 2014)'
names[which(names=='iso2k')]                       <- 'Iso2k (Konecky et al., 2020)'
names[which(names=='Other')]                       <- 'Miscellaneous'
names[which(names=='SISAL')]                       <- 'SISAL (Comas-Bru et al., 2020)'
names[which(names=='Oxford Lake Levels Database')] <- 'Lake-Level Database (Street-Perrott et al., 1989)'
names[which(names=='Liefert and Shuman, 2020')] <- 'NA Lake Level Database (Liefert and Shuman, 2020')
pieData <- proxyDf %>% group_by(source) %>% summarise(n = n())
names <- as.character(pieData$source)
names[which(names=='Arctic Holocene')]             <- 'Arctic Holocene (Sundqvist et al., 2014)'
names[which(names=='iso2k')]                       <- 'Iso2k (Konecky et al., 2020)'
names[which(names=='Other')]                       <- 'Miscellaneous'
names[which(names=='SISAL')]                       <- 'SISAL (Comas-Bru et al., 2020)'
names[which(names=='Oxford Lake Levels Database')] <- 'Lake-Level Database (Street-Perrott et al., 1989)'
names[which(names=='Liefert and Shuman, 2020')] <- 'NA Lake Level Database (Liefert and Shuman, 2020)'
names[which(names=='Temp12k')]                     <- 'Temp12k (Kaufman et al., 2020)'
names[which(names=='wNA')]                         <- 'Western North America (Routson et al., 2021)'
pieData <- pieData %>% arrange(source)
pieData2 <- pieData %>%
mutate(csum = rev(cumsum(rev(n))), pos = n/2 + lead(csum, 1),pos = if_else(is.na(pos), n/2, pos))
pie <- ggplot(pieData2,aes(x="", y=n, fill=source)) +
geom_bar(stat="identity", width=1, color= 'black') +
coord_polar("y", start=0) +
geom_label_repel(data = pieData2,
aes(y = pos, label = n),fill='White',
size = 2, nudge_x = 0.04, show.legend = FALSE) +
scale_fill_manual(values=c("powder blue","dark blue","corn flower blue","forest green",
"grey","firebrick","yellowgreen","grey40"),name='Data Source') +
theme_void() +
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.15, "in"),
legend.key.width = unit(0.15, "in"))
#legend.title = element_blank())#,legend.position = 'none')# legend.position = c(0.5,0.7))
if (save) {
ggsave(plot=pie , width = figSize[1], height = figSize[2], units='in', dpi = 600,
filename = file.path(dir,"Figures","PlotProxySource.png"))
}
pie
proxyDf <- read.csv(file=file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep='')))
pieData <- proxyDf %>% group_by(source) %>% summarise(n = n())
names <- as.character(pieData$source)
names[which(names=='Arctic Holocene')]             <- 'Arctic Holocene (Sundqvist et al., 2014)'
names[which(names=='iso2k')]                       <- 'Iso2k (Konecky et al., 2020)'
names[which(names=='Other')]                       <- 'Miscellaneous'
names[which(names=='SISAL')]                       <- 'SISAL (Comas-Bru et al., 2020)'
names[which(names=='Oxford Lake Levels Database')] <- 'Lake-Level Database (Street-Perrott et al., 1989)'
names[which(names=='Liefert and Shuman, 2020')] <- 'NA Lake Level Database (Liefert and Shuman, 2020)'
names[which(names=='Temp12k')]                     <- 'Temp12k (Kaufman et al., 2020)'
names[which(names=='wNA')]                         <- 'Western North America (Routson et al., 2021)'
pieData <- pieData %>% arrange(source)
pieData2 <- pieData %>%
mutate(csum = rev(cumsum(rev(n))), pos = n/2 + lead(csum, 1),pos = if_else(is.na(pos), n/2, pos))
pie <- ggplot(pieData2,aes(x="", y=n, fill=source)) +
geom_bar(stat="identity", width=1, color= 'black') +
coord_polar("y", start=0) +
geom_label_repel(data = pieData2,
aes(y = pos, label = n),fill='White',
size = 2, nudge_x = 0.04, show.legend = FALSE) +
scale_fill_manual(values=c("powder blue","dark blue","corn flower blue","forest green",
"grey","firebrick","yellowgreen","grey40"),name='Data Source') +
theme_void() +
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.15, "in"),
legend.key.width = unit(0.15, "in"))
#legend.title = element_blank())#,legend.position = 'none')# legend.position = c(0.5,0.7))
if (save) {
ggsave(plot=pie , width = figSize[1], height = figSize[2], units='in', dpi = 600,
filename = file.path(dir,"Figures","PlotProxySource.png"))
}
pie
pieData
sum(pieData$n)
length(lipdTSO)
names(lipdTSO[[1]])
tso<-lipdTSO[[1]]
tso$createdBy
grepl(tso$createdBy,lipd'
)
grepl(tso$createdBy,'lipd')
grepl('lipd',tso$createdBy)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/1_loadLiPD.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/1_loadLiPD.R', echo=TRUE)
#Load Lipd Files
#D__t <- readLipd(paste('http://lipdverse.org/Temp12k/',tempVers,'/Temp12k',tempVers,'.zip',sep=''))
D_hc <- readLipd(paste('http://lipdverse.org/HoloceneHydroclimate/',hcVers,'/HoloceneHydroclimate',hcVers,'.zip',sep=''))
setwd('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/HoloceneHydroclimate/HoloceneHydroclimate' )
getwd()
?setwd
