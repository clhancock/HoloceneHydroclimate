coord_fixed(xlim=lonrange,ylim=latrange)+
scale_fill_manual(values=plotSettings$color[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shape[idx],name= 'Proxy Category') +
theme_void() +
theme(panel.border    = element_rect(colour='Black',fill=NA,size=0.75),
plot.background = element_rect(colour='White',fill='White'),
panel.background = element_rect(colour='Black',fill='aliceblue'),
plot.margin     = unit(c(0.05, 0, 0.05,0.05), "in"),
legend.position = 'none')
regMap
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
basemapMercator + theme(panel.background = element_rect(fill='aliceblue'))
basemapMercator <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(IPCC_WGI_reference_regions_v4, FUN=length), fill='aliceblue', colour='white', size=2) +
geom_map(data=IPCC_WGI_reference_regions_v4, map=fortify(IPCC_WGI_reference_regions_v4),
aes(x=long, y=lat, group=group, map_id=id), fill="white", colour="white", size=1)+
#Add Country data (basemap)
geom_map(data=rworldmap::getMap("less islands"), map=fortify(rworldmap::getMap("less islands")),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
basemapMercator
basemapMercator
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
basemapMercator
basemapMercator <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(IPCC_WGI_reference_regions_v4, FUN=length), fill='white', colour='white', size=2) +
geom_map(data=IPCC_WGI_reference_regions_v4, map=fortify(IPCC_WGI_reference_regions_v4),
aes(x=long, y=lat, group=group, map_id=id), fill="aliceblue", colour='NA', size=1)+
#Add Country data (basemap)
geom_map(data=rworldmap::getMap("less islands"), map=fortify(rworldmap::getMap("less islands")),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
basemapMercator
basemapMercator <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(IPCC_WGI_reference_regions_v4, FUN=length), fill='white', colour='white', size=2) +
geom_map(data=IPCC_WGI_reference_regions_v4, map=fortify(IPCC_WGI_reference_regions_v4),
aes(x=long, y=lat, group=group, map_id=id), fill="#F2F6FF", colour='NA', size=1)+
#Add Country data (basemap)
geom_map(data=rworldmap::getMap("less islands"), map=fortify(rworldmap::getMap("less islands")),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
basemapMercator
basemapMercator <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(IPCC_WGI_reference_regions_v4, FUN=length), fill='white', colour='white', size=2) +
geom_map(data=IPCC_WGI_reference_regions_v4, map=fortify(IPCC_WGI_reference_regions_v4),
aes(x=long, y=lat, group=group, map_id=id), fill="##F4F7FF", colour='NA', size=1)+
#Add Country data (basemap)
geom_map(data=rworldmap::getMap("less islands"), map=fortify(rworldmap::getMap("less islands")),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
basemapMercator
basemapMercator <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(IPCC_WGI_reference_regions_v4, FUN=length), fill='white', colour='white', size=2) +
geom_map(data=IPCC_WGI_reference_regions_v4, map=fortify(IPCC_WGI_reference_regions_v4),
aes(x=long, y=lat, group=group, map_id=id), fill="#F4F7FF", colour='NA', size=1)+
#Add Country data (basemap)
geom_map(data=rworldmap::getMap("less islands"), map=fortify(rworldmap::getMap("less islands")),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
basemapMercator
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
ggdraw(ggplot() +
# ggtitle(paste('(',position[which(regNames==reg)],') ',name,' (',reg,')',sep=''))+
theme(plot.background= element_rect(colour='White',fill='White'),
panel.background = element_rect(colour='White',fill='White')))+
draw_plot(ggarrange(compBands$na, pltTime, nrow = 2,heights=c(0.7,0.3)), x = 0, y = 0, width = 0.7, height = 1) +
draw_plot(ggarrange(compBands$ts, pltTime, nrow = 2,heights=c(0.7,0.3)), x = 0, y = 0, width = 0.7, height = 1) +
draw_plot(regMap,  x = 0.05,   y = 0.7, width = 0.3, height = 0.9)
#
regPlts[[reg]] <- ggdraw(ggplot() +
# ggtitle(paste('(',position[which(regNames==reg)],') ',name,' (',reg,')',sep=''))+
theme(plot.background= element_rect(colour='White',fill='White'),
panel.background = element_rect(colour='White',fill='White')))+
draw_plot(ggarrange(compBands$na, pltTime, nrow = 2,heights=c(0.7,0.3)), x = 0, y = 0, width = 0.7, height = 1) +
draw_plot(ggarrange(compBands$ts, pltTime, nrow = 2,heights=c(0.7,0.3)), x = 0, y = 0, width = 0.7, height = 1) +
draw_plot(regMap,  x = 0.05,   y = 0.7, width = 0.3, height = 0.9)
regPlts[[reg]]
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
latrange
range(fortify(RegShp)$lat)
range(fortify(RegShp)$long)
lonrange[1]
lonrange
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
diff(latrange[2],-90)
latrange[2]
diff(latrange[2],-90)
diff(c(latrange[2],-90))
z<- -200
z-180
abs(z)-180
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
latrange
reg
#RegionMap
RegShp   <- IPCC_WGI_reference_regions_v4[IPCC_WGI_reference_regions_v4@data$Acronym == reg, ]#regionData[[reg]]$polygon
latrange <- range(fortify(RegShp)$lat)
lonrange <- range(fortify(RegShp)$long)
range <- max(diff(latrange),diff(lonrange))/2
lonrange
latrange
if(diff(latrange)>diff(lonrange)){
latrange <- mean(latrange) + c(range*-1,range)*1.2
lonrange <- mean(lonrange) + c(range*-1,range)*1.8
} else{
latrange <- mean(latrange) + c(range*-1,range)*0.8
lonrange <- mean(lonrange) + c(range*-1,range)*1.2
}
latrange
lonrange
c(-216,216)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
length(regNames)/2
length(regNames)/2/9
(9/7)*length(regNames)/2
(7/9)*length(regNames)/2
length(regNames)/2
(8/9)*length(regNames)/2
(8/9)*length(regNames)/2
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure3_CompositeTimeseriesGrid.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
map2
if (var == 'HC'){
map2 <- map +
theme(plot.margin = unit(c(0,rep(0,4)), "in"))+
annotate("text",label="(a) Hydroclimate", x = 0.11, y = 0.93,family='sans',color='Black',size = 2)
} else{
map2 <- map +annotate("text",label="(b) Temperature", x = 0.11, y = 0.93,family='sans',color='Black',size = 2.2)
}
map3 <- map2 + draw_plot(scale,
x = 0.14,
y = 0.22,
width = xSize, height = ySize*2.5)
ggsave(plot=map3, width = 6.5, height = 3.4, dpi = 600,
filename = paste(file.path(dir,'Figures','global_'),modelVar,'_compBandPlt.png',sep=''))
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/2_Composite.R', echo=TRUE)
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/2_Composite.R', echo=TRUE)
names(lipdTSO[[1]])
names(lipdTSO[[1]])
names(lipdTSO)
names(lipdTSO[[1]])
lipdData <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))[[var]]
length(lipdData)
lipdTSO  <- lipdData[-which(pullTsVariable(lipdData,"climateInterpretation1_seasonalityGeneral") %in% c('Summer+','Winter+'))]
length(lipdTSO)
pullTsVariable(lipdData,"climateInterpretation1_seasonalityGeneral")
which(pullTsVariable(lipdData,"climateInterpretation1_seasonalityGeneral") %in% c('Summer+','Winter+'))
which(pullTsVariable(lipdData,"climateInterpretation1_seasonalityGeneral") == 'Summer+','Winter+')
unique(pullTsVariable(lipdData,"climateInterpretation1_seasonalityGeneral"))
lipdData <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))[[var]]
lipdTSO  <- lipdData[-which(pullTsVariable(lipdData,"climateInterpretation1_seasonalityGeneral") %in% c('winter+','summer','Summer+','Winter+'))]
length(lipdTSO)
lipdData <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))[[var]]
lipdTSO  <- lipdData[-which(pullTsVariable(lipdData,"climateInterpretation1_seasonalityGeneral") %in% c('winter+','summer','Summer+','Winter+'))]
if(var == 'T'){
lipdTSO <- filterTs(lipdTSO,'paleoData_units == degC')
lipdTSO <- filterTs(lipdTSO,'paleoData_datum == abs')
std <- FALSE      #Use calibrated data so no need to normalize variance
} else{std <- TRUE} #Normalize variance because data recorded with different units
nens          <- 500     #Ensemble numbers (lower = faster)
binsize       <- 100     #years (median resolution = 107yrs)
ageMin        <- 0       #age BP
ageMax        <- 12400   #age BP
searchDur     <- 3500    #yrs (for 3 lake deposit data points)
nThresh       <- 6       #minimum no. of records, else skip
#Set bin vectors
binvec   <- seq(ageMin-binsize/2, to = ageMax+binsize/2, by = binsize)
binYears <- rowMeans(cbind(binvec[-1],binvec[-length(binvec)]))
#ID regions to reconstruct based on number of records (nThresh)
regNames <- data.frame(name=pullTsVariable(lipdTSO,'geo_ipccRegion')) %>%
group_by(name) %>%
summarise(n = n()) %>%
filter(n >= nThresh)
regNames <- c(as.character(regNames$name),'EAN','SSA') #Add 2 SH regions with fewer records to gain global coverage
#Set up data to add once regional composite is calculated
compositeEnsemble <- vector(mode='list')
medianCompositeTS <- data_frame(time=binYears[1:which(binYears==12000)])
#Loop to composite (by region)
for (reg in c(regNames)) {
lipdReg  <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
for (i in 1:length(lipdReg)){
if (lipdReg[[i]]$climateInterpretation1_interpDirection == 'negative'){
lipdReg[[i]]$paleoData_values <- lipdReg[[i]]$paleoData_values*-1
}
}
set.seed(5) #Reproducibility
ensOut <- foreach(i = 1:nens) %dopar% {
tc <- compositeEnsembles(fTS                  = lipdReg,
binvec               = binvec,
stanFun              = standardizeMeanIteratively,
binFun               = simpleBinTs,
ageVar               = "age",
alignInterpDirection = FALSE,
spread               = TRUE,
duration             = searchDur,
searchRange          = c(1000,10000),
normalizeVariance    = std,
minN                 = 3)
return(list(composite = tc$composite,count = tc$count))
}
regionComposite           <- as.matrix(purrr::map_dfc(ensOut,magrittr::extract,"composite"))
rownames(regionComposite) <- binYears
regionComposite           <- regionComposite[1:which(binYears==12000),]
compositeEnsemble[[reg]]  <- regionComposite
medianCompositeTS[[reg]]  <- apply(regionComposite,1,median,na.rm=TRUE)
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000)],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
}
if(save){
write.csv(medianCompositeTS, row.names=FALSE, file=file.path(saveDir,'MedianTS_byRegion.csv'))
for (reg in names(compositeEnsemble)){
write.csv(compositeEnsemble[[reg]], row.names=FALSE,file = file.path(saveDir,paste(reg,'.csv',sep='')))
}
print("csv files saved")
}
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/4_CreateRegionsRDS.R', echo=TRUE)
dir
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
lipdData  <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
regionData <- vector(mode='list')
regionSummary <- data.frame(region=names(regionData),
name=rep(NA,length(regionData)),
type=rep(NA,length(regionData)),
latitude=rep(NA,length(regionData)),
longitude=rep(NA,length(regionData)),
nproxy_HC=rep(NA,length(regionData)),
nproxy_T=rep(NA,length(regionData)),
composite_HC=rep(NA,length(regionData)),
composite_T=rep(NA,length(regionData))
)
for (reg in sort(as.vector(refregions$Acronym))){
regionData[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
regionData[[reg]]$name <- as.character(regionData[[reg]]$polygon$Name)
regionData[[reg]]$type <- as.character(regionData[[reg]]$polygon$Type)
regionData[[reg]]$latitude  <- regionData[[reg]]$polygon@polygons[[1]]@labpt[[1]]
regionData[[reg]]$longitude <- regionData[[reg]]$polygon@polygons[[1]]@labpt[[2]]
regionData[[reg]]$xadjust   <- NA
regionData[[reg]]$yadjust   <- NA
for (var in c('HC','T')){
regionData[[reg]][[var]] <- vector(mode='list')
regionData[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
regionData[[reg]][[var]]$nproxy <- length(regionData[[reg]][[var]]$LiPD)
if (regionData[[reg]][[var]]$nproxy > 0){
regionData[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
pltTimeAvail <- plotTimeAvailabilityTs(regionData[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=100)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/regionData[[reg]][[var]]$nproxy,1))
regionData[[reg]][[var]]$pltTimeAvail50range <- seq(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
} else{
regionData[[reg]][[var]]$SummaryDF <- NA
}
tryCatch(
expr = {
regionData[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))},
error = function(e){
regionData[[reg]][[var]]$compositeEnsemble <- NA}
)
#Model Data?
}
}
#Americas
regionData[['GIC']]$xadjust  <-  -0.01
regionData[['NWN']]$xadjust  <- -0.002
regionData[['NWN']]$yadjust  <- -0.02
regionData[['NEN']]$yadjust  <- -0.028
regionData[['NEN']]$xadjust  <- -0.002
regionData[['WNA']]$xadjust  <- -0.053
regionData[['CNA']]$xadjust  <-  0.007
regionData[['ENA']]$xadjust  <-  0.060
regionData[['NAS']]$xadjust  <- -0.04
regionData[['SCA']]$xadjust  <- -0.015
regionData[['CAR']]$xadjust  <-  0.03
regionData[['CAR']]$yadjust  <-  0.045
regionData[['NWS']]$xadjust  <- -0.01
regionData[['NSA']]$xadjust  <-  0.025
regionData[['NSA']]$yadjust  <-  0.048
regionData[['NES']]$yadjust  <-  0.022
regionData[['SAM']]$yadjust  <- -0.03
#Eruope/Africa
regionData[['NEU']]$xadjust  <-  0.0
regionData[['NEU']]$yadjust  <-  0.01
regionData[['WCE']]$xadjust  <- -0.02
regionData[['MED']]$xadjust  <- -0.02
regionData[['CAF']]$xadjust  <- -0.054
regionData[['NEAF']]$yadjust <-  0.002
regionData[['SEAF']]$yadjust <- -0.002
regionData[['WSAF']]$xadjust <- -0.032
regionData[['ESAF']]$xadjust <-  0.03
regionData[['WSB']]$xadjust <-  -0.035
regionData[['WSB']]$yadjust <-  0.015
regionData[['ESB']]$yadjust <-  0.014
regionData[['ESB']]$yadjust <-  0.014
regionData[['ESB']]$xadjust <- -0.01
regionData[['RFE']]$xadjust <- 0.01
regionData[['RFE']]$yadjust <- -0.03
regionData[['WCA']]$xadjust <- -0.021
regionData[['ECA']]$xadjust <- -0.0035
regionData[['ECA']]$yadjust <-  0.015
regionData[['TIB']]$xadjust <-  0.003
regionData[['TIB']]$yadjust <- -0.007
regionData[['EAS']]$xadjust <-  0.021
regionData[['SAS']]$yadjust <- -0.02
regionData[['SAS']]$xadjust <-  0.0
regionData[['SEA']]$xadjust <- -0.017
regionData[['SAU']]$xadjust <- -0.044
regionData[['NZ']]$xadjust  <- -0.017
regionData[['EAN']]$yadjust <- 0.01
#Ocean
regionData[['EPO']]$xadjust <- -0.02
regionData[['ARO']]$xadjust <- -0.18
regionData[['ARO']]$yadjust <- -0.03
regionData[['NAO']]$yadjust <-  0.106
regionData[['NAO']]$xadjust <-  0.03
saveRDS(regionData,file.path(dir,'Data','FigureSettings','regionData.rds'))
library(RCurl)
library(sp)
var     <- 'T'
#dir  <- getwd()
dir  <- '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate' #
lipdTSO <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))[[var]]
proxyDf <- read.csv(file=file.path(dir,'Data','Proxy',paste('proxyMetaData_',var,'.csv',sep='')))
regionData <- readRDS(file.path(dir,'Data','FigureSettings','regionData.rds'))
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
countries  <- rworldmap::getMap("less islands")
countries  <- sp::spTransform(countries,  CRSobj = PROJ)
###Figure Settings
figFont <- 'sans'
figText <- 8
figSize <- c(10,5)
##############################
###Create list of color information
plotSettings <- vector(mode='list')
if (var == 'HC'){
specific <- TRUE
if(specific){
plotSettings$names <- sort(unique(proxyDf$CategorySpec))
#
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="Glacial Ice (Accumulation)")] <- "powder blue"
plotSettings$color[which(plotSettings$names=="Shoreline (Lake Level)")]  <- "corn flower blue"
plotSettings$color[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- "dark blue"
plotSettings$color[which(plotSettings$names=="Leaf Wax (δD)")]           <- "dark orchid" #δ
plotSettings$color[which(plotSettings$names=="Other (calibrated)")]      <- "grey40"
plotSettings$color[which(plotSettings$names=="Other (not calibrated)")]  <- "grey"
plotSettings$color[which(plotSettings$names=="Pollen (calibrated)")]     <- "forest green"
plotSettings$color[which(plotSettings$names=="Pollen (not calibrated)")] <- "yellowgreen"
plotSettings$color[which(plotSettings$names=="Speleothem (other)")]      <- "darkorange"
plotSettings$color[which(plotSettings$names=="Speleothem (δ13C)")]       <- "lightcoral"
plotSettings$color[which(plotSettings$names=="Speleothem (δ18O)")]       <- "firebrick"
#
plotSettings$shape <- as.character(plotSettings$names)
plotSettings$shape[which(plotSettings$names=="Glacial Ice (Accumulation)")] <- 12
plotSettings$shape[which(plotSettings$names=="Shoreline (Lake Level)")]  <- 21
plotSettings$shape[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- 15
plotSettings$shape[which(plotSettings$names=="Leaf Wax (δD)")]           <- 5
plotSettings$shape[which(plotSettings$names=="Other (calibrated)")]      <- 6
plotSettings$shape[which(plotSettings$names=="Other (not calibrated)")]  <- 13
plotSettings$shape[which(plotSettings$names=="Pollen (calibrated)")]     <- 14
plotSettings$shape[which(plotSettings$names=="Pollen (not calibrated)")] <- 1
plotSettings$shape[which(plotSettings$names=="Speleothem (other)")]      <- 17
plotSettings$shape[which(plotSettings$names=="Speleothem (δ13C)")]       <- 23
plotSettings$shape[which(plotSettings$names=="Speleothem (δ18O)")]       <- 11
} else{
plotSettings$names <- sort(unique(proxyDf$Category))
#
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="Glacier Ice")]             <- "powder blue"
plotSettings$color[which(plotSettings$names=="Shoreline")]               <- "corn flower blue"
plotSettings$color[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- "dark blue"
plotSettings$color[which(plotSettings$names=="Leaf Wax (δD)")]           <- "dark orchid"
plotSettings$color[which(plotSettings$names=="Other")]                   <- "grey"
plotSettings$color[which(plotSettings$names=="Pollen")]                  <- "forest green"
plotSettings$color[which(plotSettings$names=="Speleothem")]              <- "firebrick"
#
plotSettings$shape <- as.character(plotSettings$names)
plotSettings$shape[which(plotSettings$names=="Glacier Ice")]             <- 12
plotSettings$shape[which(plotSettings$names=="Shoreline")]               <- 21
plotSettings$shape[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- 15
plotSettings$shape[which(plotSettings$names=="Leaf Wax (δD)")]           <- 5
plotSettings$shape[which(plotSettings$names=="Other")]                   <- 13
plotSettings$shape[which(plotSettings$names=="Pollen")]                  <- 14
plotSettings$shape[which(plotSettings$names=="Speleothem")]              <- 11
}
} else if (var == 'T'){
plotSettings$names <- sort(unique(proxyDf$Category))
#
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="alkenone")]          <- "tomato"
plotSettings$color[which(plotSettings$names=="biophysical")]       <- "skyblue4"
plotSettings$color[which(plotSettings$names=="chironomid")]        <- "firebrick"
plotSettings$color[which(plotSettings$names=="isotope")]           <- "orange"
plotSettings$color[which(plotSettings$names=="Mg/Ca")]             <- "midnight blue"
plotSettings$color[which(plotSettings$names=="other biomarker")]   <- "medium blue"
plotSettings$color[which(plotSettings$names=="other ice")]         <- "powder blue"
plotSettings$color[which(plotSettings$names=="other microfossil")] <- "plum4"
plotSettings$color[which(plotSettings$names=="pollen")]            <- "forest green"
#
plotSettings$color[which(plotSettings$names=="alkenone")]          <- 22
plotSettings$color[which(plotSettings$names=="biophysical")]       <- 1
plotSettings$color[which(plotSettings$names=="chironomid")]        <- 30
plotSettings$color[which(plotSettings$names=="isotope")]           <- 15
plotSettings$color[which(plotSettings$names=="Mg/Ca")]             <- 25
plotSettings$color[which(plotSettings$names=="other biomarker")]   <- 13
plotSettings$color[which(plotSettings$names=="other ice")]         <- 12
plotSettings$color[which(plotSettings$names=="other microfossil")] <- 5
plotSettings$color[which(plotSettings$names=="pollen")]            <- 14
}
plotSettings$shape <- as.numeric(plotSettings$shape)
if (var=='T'){ Csettings  <- c("#fddbc7","#d6604d","#b2182b") #reds
}else{
Csettings <- c("#92C5DE","#4393C3",'#2166AC') #Blues
}
regionsSelect <- vector(mode='list')
regionsSelect$all       <- refregions
regionsSelect$select    <- subset(refregions, Acronym %in% proxyDf$ipccReg)
regionsSelect$composite <- subset(refregions, Acronym %in% colnames(read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))))
regionsSelect$composite <- subset(refregions, Acronym %in% colnames(read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))))
file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))
file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv')
read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))
'/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Data/RegionComposites/T'
'/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Data/RegionComposites/T/MedianTSbyRegion.csv''
'/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Data/RegionComposites/T'
"/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Data/RegionComposites/T/MedianTSbyRegion.csv"
file.path("/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Data/RegionComposites/T",'MedianTSbyRegion.csv'==file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))
file.path("/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Data/RegionComposites/T",'MedianTSbyRegion.csv')==file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv')
regionsSelect$composite <- subset(refregions, Acronym %in% colnames(read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))))
regionsSelect <- vector(mode='list')
regionsSelect$all       <- refregions
regionsSelect$select    <- subset(refregions, Acronym %in% proxyDf$ipccReg)
regionsSelect$composite <- subset(refregions, Acronym %in%) colnames(read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv')))
read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))
var<-'HC'
regionsSelect$composite <- subset(refregions, Acronym %in% colnames(read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))))
read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv')))
read.csv(file.path(dir,'Data','RegionComposites','T','MedianTSbyRegion.csv'))
regionsSelect$composite <- subset(refregions, Acronym %in% colnames(read.csv(file.path(dir,'Data','RegionComposites',var,'MedianTSbyRegion.csv'))))
file.path(dir,'Data','RegionComposites',var,'MedianTSbyRegion.csv'))
file.path(dir,'Data','RegionComposites',var,'MedianTSbyRegion.csv')
var<-'T'
regionsSelect <- vector(mode='list')
regionsSelect$all       <- refregions
regionsSelect$select    <- subset(refregions, Acronym %in% proxyDf$ipccReg)
regionsSelect$composite <- subset(refregions, Acronym %in% colnames(read.csv(file.path(dir,'Data','RegionComposites',var,'MedianTS_byRegion.csv'))))
library(ggplot2)
basemap <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(refregions, FUN=length), fill=NA, colour='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", colour="white", size=1)+
#Add Country data (basemap)
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
basemap
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/Figure8_GlobalTimeseries.R', echo=TRUE)
Csettings <- c("#92C5DE","#4393C3",'#2166AC')
