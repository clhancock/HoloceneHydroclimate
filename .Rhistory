} else if (count <= figBreaks[1]){ countName <- 0
} else if (count <= figBreaks[2]){ countName <- 1
} else if (count <= figBreaks[3]){ countName <- 2
} else if (count <= figBreaks[4]){ countName <- 3
} else if (count <= figBreaks[5]){ countName <- 4
} else if (count <= figBreaks[6]){ countName <- 5
} else if (count <= figBreaks[7]){ countName <- 6
} else {countName <- 7}
dataTable$Count[which(dataTable$id==as.character(i-1))]     <- count
dataTable$CountName[which(dataTable$id==as.character(i-1))] <- countName
dataTable$Region[which(dataTable$id==as.character(i-1))]    <-region
}
proxyMapSites <- basemap +
geom_map(data=refrenceSubset, map=dataTable, alpha=0.75, size=0.3, color='black' ,
aes(x=long, y=lat, group=group, map_id=id),fill=NA,linetype = "dashed") +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Fail"),],
aes(x=longitude.1 , y=latitude.1),color='Red',shape = 1, size = 1,stroke=0.5) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Close"),],
aes(x=longitude.1 , y=latitude.1),color='Yellow',shape = 1, size = 2,stroke=1) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Pass"),],
aes(x=longitude.1 , y=latitude.1),color='Green',shape = 1, size = 3,stroke=1.5) +
coord_map(projection = PROJ) +
coord_cartesian(xlim = range(as.data.frame(proxyDataPrj)$longitude.1), ylim = range(as.data.frame(proxyDataPrj)$latitude.1))+
#scale_starshape_manual(values=plotSettings$shapes,name= 'Proxy Category') +
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
panel.background = element_rect(fill = 'white',color='Black'),
legend.background =  element_rect(fill = alpha('white', 0.85),size=0.5),#alpha=0.5),
legend.position  = 'none')#,legend.position = 'none')# legend.position = c(0.5,0.7))
proxyMapSites
compositePlot <- ggdraw(ggplot() +
ggtitle(paste(dataset,' Summary Page \n (',
'Pass = ',as.character(sum(proxyDf$PassFail == "Pass")),'; ',
'\n Close (AgeControl<5ka with 5+ Dates) = ',as.character(sum(proxyDf$PassFail == "Close")),'; ',
'\n Fail = ',as.character(sum(proxyDf$PassFail == "Fail")),')',sep=''))+
theme(plot.background= element_rect(colour='White',fill='White'),
panel.background = element_rect(colour='White',fill='White')))+
draw_plot(plotTime, x = 0.6, y = 0.74, width = 0.4, height = 0.25) +
draw_plot(plotRange, x = 0.6, y = 0.5, width = 0.4, height = 0.25) +
draw_plot(plotResPlus, x = 0.6, y = 0.25, width = 0.4, height = 0.25) +
draw_plot(plotAgeControl, x = 0.6, y = 0, width = 0.4, height = 0.25) +
draw_plot(proxyMapSites,  x = 0,   y = 0.15, width = 0.6, height = 0.7)
#ggsave(compositePlot,filename = paste("C://Users/clh624/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
ggsave(compositePlot,filename = paste("/Users/chrishancock/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
#Dataset Dashboard
dataset='LegacyClimate'
lipd <- TS_Poll
colors  = c("forestgreen")
proxyDf <- tibble(dataset       = pullTsVariable(lipd,'dataSetName'),
tsid          = pullTsVariable(lipd,'paleoData_TSid'),
PassFail      = pullTsVariable(lipd,'PassFail'),
longitude     = pullTsVariable(lipd,'geo_longitude'),
latitude      = pullTsVariable(lipd,'geo_latitude'),
ipccReg       = pullTsVariable(lipd,'geo_ipccRegion'),
archive       = pullTsVariable(lipd,'archiveType'),
proxy         = rep('Pollen',length(pullTsVariable(lipd,'archiveType'))),
minAge        = pullTsVariable(lipd,'ageMin'),
maxAge        = pullTsVariable(lipd,'ageMax'),
recordRange   = pullTsVariable(lipd,'ageRange'),
recordRes     = pullTsVariable(lipd,'ageRes'),
recordResPlus = pullTsVariable(lipd,'ageResPlus'),
AgeControlMax = pullTsVariable(lipd,'AgeControlMax'),
AgeControlN   = pullTsVariable(lipd,'AgeControlN'),
climInterp    = pullTsVariable(lipd,'climateInterpretation1_variable'))
plotRange <- ggplot(proxyDf)+
geom_rect(aes(xmin = 4000, xmax = 12000, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.6) +
geom_histogram(aes(recordRange,fill=proxy),alpha=0.7,binwidth = 300) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Record Length (years)",
limits=c(0,12000),expand=c(0,0),breaks=seq(0,12000,2000)) +
scale_y_continuous(name = "Count of Records",oob=scales::squish,expand=c(0,0)) +
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')#legend.title = element_blank())#,legend.position = c(0.5,0.6))#legend.position = 'none')#
plotResPlus <- ggplot(proxyDf)+
geom_rect(aes(xmin = 0, xmax = 400, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.6) +
geom_histogram(aes(recordRes,fill=proxy),alpha=0.7,binwidth = 50) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Median Sample Resolution (years/sample)" , expand=c(0,0)) +
scale_y_continuous(name="Count of Records", oob=scales::squish,expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')#legend.title = element_blank())#,legend.position = c(0.5,0.6))#legend.position = 'none')# legend.position = c(0.5,0.7))
plotAgeControl <- ggplot(proxyDf)+
geom_rect(aes(xmin = 0, xmax = 3000, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.3) +
geom_rect(aes(xmin = 3000, xmax = 5000, ymin = -Inf, ymax = Inf), fill = "yellow",alpha=0.6) +
geom_histogram(aes(AgeControlMax,fill=proxy),alpha=0.7) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Max Holocene Gap in Holocene Age Resolution (years)" , expand=c(0,0)) +
scale_y_continuous(name="Count of Records", oob=scales::squish,expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')# legend.position = c(0.5,0.7))
#legend.title = element_blank())#,legend.position = c(0.5,0.6))#
plotTimeData <- plotTimeAvailabilityTs(lipd,age.range = c(0,18000),step=200,group='PassFail')
plotTime <- ggplot(plotTimeData$data,aes(yvec,value))+
geom_rect(aes(xmin = 0, xmax = 12000, ymin = -Inf, ymax = Inf), fill = "grey",alpha=0.3) +
geom_area(alpha=1,aes(fill=group),color='Black',size=0.2)+
scale_fill_manual(values=c('yellow','red','green')) +
scale_x_reverse(name = "Age (yr BP)", limits=c(18000,0),expand=c(0,0))  +
scale_y_continuous(name = "Count of Records",expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank())#,legend.position = 'none')# legend.position = c(0.5,0.7))
proxyDataPrj   <- SpatialPointsDataFrame(proxyDf[,c("longitude", "latitude")], proxyDf, proj4string=CRS(PROJorig))
proxyDataPrj   <- spTransform(proxyDataPrj, CRSobj = PROJ)
refrenceSubset <-       subset(refregions, Acronym %in% proxyDf$ipccReg)
refrenceSubsetSelect <- subset(refregions, Acronym %in% (proxyDf %>%
group_by(ipccReg) %>%
summarize(count=n()) %>%
filter(count >= 6))$ipccReg)
dataTable <- fortify(refrenceSubset)
dataTable$Count     <- NA
dataTable$CountName <- NA
dataTable$Region    <- NA
#Set Breaks and color scheme with lowest group as grey
figBreaks <- c(5,10,20,30,40,60,80)
figlabels <- c(paste("<",figBreaks[1]+1),
paste(as.character(figBreaks[-length(figBreaks)]+1),"-",
as.character(figBreaks[-1])),
paste(">",figBreaks[length(figBreaks)]))
figPalette <- c("#CCCCCC",RColorBrewer::brewer.pal(n = 7, name = "YlOrBr"))
for (region in list(levels(refrenceSubset@data[["Acronym"]]))[[1]]){
i = which(refregions@data[["Acronym"]]==region)
count <- length(which(proxyDf$ipccReg==region))
if (count == 0){         countName <- NA
} else if (count <= figBreaks[1]){ countName <- 0
} else if (count <= figBreaks[2]){ countName <- 1
} else if (count <= figBreaks[3]){ countName <- 2
} else if (count <= figBreaks[4]){ countName <- 3
} else if (count <= figBreaks[5]){ countName <- 4
} else if (count <= figBreaks[6]){ countName <- 5
} else if (count <= figBreaks[7]){ countName <- 6
} else {countName <- 7}
dataTable$Count[which(dataTable$id==as.character(i-1))]     <- count
dataTable$CountName[which(dataTable$id==as.character(i-1))] <- countName
dataTable$Region[which(dataTable$id==as.character(i-1))]    <-region
}
proxyMapSites <- basemap +
geom_map(data=refrenceSubset, map=dataTable, alpha=0.75, size=0.3, color='black' ,
aes(x=long, y=lat, group=group, map_id=id),fill=NA,linetype = "dashed") +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Fail"),],
aes(x=longitude.1 , y=latitude.1),color='Red',shape = 1, size = 1,stroke=0.5) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Close"),],
aes(x=longitude.1 , y=latitude.1),color='Yellow',shape = 1, size = 2,stroke=1) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Pass"),],
aes(x=longitude.1 , y=latitude.1),color='Green',shape = 1, size = 3,stroke=1.5) +
coord_map(projection = PROJ) +
coord_cartesian(xlim = range(as.data.frame(proxyDataPrj)$longitude.1), ylim = range(as.data.frame(proxyDataPrj)$latitude.1))+
#scale_starshape_manual(values=plotSettings$shapes,name= 'Proxy Category') +
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
panel.background = element_rect(fill = 'white',color='Black'),
legend.background =  element_rect(fill = alpha('white', 0.85),size=0.5),#alpha=0.5),
legend.position  = 'none')#,legend.position = 'none')# legend.position = c(0.5,0.7))
proxyMapSites
compositePlot <- ggdraw(ggplot() +
ggtitle(paste(dataset,' Summary Page \n (',
'Pass = ',as.character(sum(proxyDf$PassFail == "Pass")),'; ',
'\n Close (MaxAgeControlSpread<5ka with 5+ Dates) = ',as.character(sum(proxyDf$PassFail == "Close")),'; ',
'\n Fail = ',as.character(sum(proxyDf$PassFail == "Fail")),')',sep=''))+
theme(plot.background= element_rect(colour='White',fill='White'),
panel.background = element_rect(colour='White',fill='White')))+
draw_plot(plotTime, x = 0.6, y = 0.74, width = 0.4, height = 0.25) +
draw_plot(plotRange, x = 0.6, y = 0.5, width = 0.4, height = 0.25) +
draw_plot(plotResPlus, x = 0.6, y = 0.25, width = 0.4, height = 0.25) +
draw_plot(plotAgeControl, x = 0.6, y = 0, width = 0.4, height = 0.25) +
draw_plot(proxyMapSites,  x = 0,   y = 0.15, width = 0.6, height = 0.7)
#ggsave(compositePlot,filename = paste("C://Users/clh624/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
ggsave(compositePlot,filename = paste("/Users/chrishancock/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
TS_Poll <- splitInterpretationByScope(extractTs(Dpoll))
TS_Poll <- TS_Poll[which(pullTsVariable(TS_Poll,'paleoData_primaryTimeseries')==TRUE)]
TS_Poll <- TS_Poll[which(pullTsVariable(TS_Poll,'climateInterpretation1_variable')=='P')]
lipd <- TS_Poll
for (ts in 1:length(lipd)){
if (is.null(lipd[[ts]]$climateInterpretation1_direction) == FALSE){
lipd[[ts]]$climateInterpretation1_interpDirection <- lipd[[ts]]$climateInterpretation1_direction
}
#Add Ipcc regions to metadata
pointData <- data.frame(longitude=c(lipd[[ts]]$geo_longitude),latitude=c(lipd[[ts]]$geo_latitude))
pointData <- spTransform(SpatialPointsDataFrame(coords=pointData,data = pointData, proj4string = CRS(PROJorig)),CRSobj = PROJ)
lipd[[ts]]$geo_ipccRegion <- as.character(over(pointData, refregions)$Acronym)
#
#Add age information
tso <- data.frame(age = as.numeric(lipd[[ts]]$age), values = as.numeric(lipd[[ts]]$paleoData_values)) %>%
filter(between(age,0,12000)) %>%
filter(!is.na(values)) %>%
arrange(age)
lipd[[ts]]$ageMin     <- min(tso$age)
lipd[[ts]]$ageMax     <- max(tso$age)
lipd[[ts]]$ageRange   <- diff(range(tso$age))
lipd[[ts]]$ageRes     <- median(diff(tso$age))
lipd[[ts]]$ageResPlus <- median(diff(tso$age[which(diff(tso$values) != 0)]))
AgeControl <- Dpoll[[TS_Poll[[ts]]$dataSetName]]$chronData[[1]][["measurementTable"]][[1]][["age"]][["values"]]
AgeControl <- AgeControl[which(AgeControl<=12000)]
lipd[[ts]]$AgeControlMax <- max(diff(c(lipd[[ts]]$ageMin,AgeControl,lipd[[ts]]$ageMax)))
lipd[[ts]]$AgeControlN   <- length(AgeControl)
if (!is.na(lipd[[ts]]$ageRes)){
if (lipd[[ts]]$ageRes < 400){
if (lipd[[ts]]$AgeControlMax < 3000){
lipd[[ts]]$PassFail <- 'Pass'
} else if ((lipd[[ts]]$AgeControlMax < 4000) & (lipd[[ts]]$AgeControlN >= 6)){
lipd[[ts]]$PassFail <- 'Close'
#  } else if ((lipd[[ts]]$AgeControlMax < 5000) & (lipd[[ts]]$AgeControlN >= 5)){
#   lipd[[ts]]$PassFail <- 'Close'
} else {lipd[[ts]]$PassFail <- 'Fail'}
} else {lipd[[ts]]$PassFail <- 'Fail'}
if (lipd[[ts]]$ageRange < 4000){lipd[[ts]]$PassFail <- 'Fail'}
if (lipd[[ts]]$AgeControlN <= 2){lipd[[ts]]$PassFail <- 'Fail'}
} else {lipd[[ts]]$PassFail <- 'Fail'}
}
TS_Poll <- lipd
#Dataset Dashboard
dataset='LegacyClimate'
lipd <- TS_Poll
colors  = c("forestgreen")
proxyDf <- tibble(dataset       = pullTsVariable(lipd,'dataSetName'),
tsid          = pullTsVariable(lipd,'paleoData_TSid'),
PassFail      = pullTsVariable(lipd,'PassFail'),
longitude     = pullTsVariable(lipd,'geo_longitude'),
latitude      = pullTsVariable(lipd,'geo_latitude'),
ipccReg       = pullTsVariable(lipd,'geo_ipccRegion'),
archive       = pullTsVariable(lipd,'archiveType'),
proxy         = rep('Pollen',length(pullTsVariable(lipd,'archiveType'))),
minAge        = pullTsVariable(lipd,'ageMin'),
maxAge        = pullTsVariable(lipd,'ageMax'),
recordRange   = pullTsVariable(lipd,'ageRange'),
recordRes     = pullTsVariable(lipd,'ageRes'),
recordResPlus = pullTsVariable(lipd,'ageResPlus'),
AgeControlMax = pullTsVariable(lipd,'AgeControlMax'),
AgeControlN   = pullTsVariable(lipd,'AgeControlN'),
climInterp    = pullTsVariable(lipd,'climateInterpretation1_variable'))
plotRange <- ggplot(proxyDf)+
geom_rect(aes(xmin = 4000, xmax = 12000, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.6) +
geom_histogram(aes(recordRange,fill=proxy),alpha=0.7,binwidth = 300) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Record Length (years)",
limits=c(0,12000),expand=c(0,0),breaks=seq(0,12000,2000)) +
scale_y_continuous(name = "Count of Records",oob=scales::squish,expand=c(0,0)) +
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')#legend.title = element_blank())#,legend.position = c(0.5,0.6))#legend.position = 'none')#
plotResPlus <- ggplot(proxyDf)+
geom_rect(aes(xmin = 0, xmax = 400, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.6) +
geom_histogram(aes(recordRes,fill=proxy),alpha=0.7,binwidth = 50) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Median Sample Resolution (years/sample)" , expand=c(0,0)) +
scale_y_continuous(name="Count of Records", oob=scales::squish,expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')#legend.title = element_blank())#,legend.position = c(0.5,0.6))#legend.position = 'none')# legend.position = c(0.5,0.7))
plotAgeControl <- ggplot(proxyDf)+
geom_rect(aes(xmin = 0, xmax = 3000, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.3) +
geom_rect(aes(xmin = 3000, xmax = 5000, ymin = -Inf, ymax = Inf), fill = "yellow",alpha=0.6) +
geom_histogram(aes(AgeControlMax,fill=proxy),alpha=0.7) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Max Holocene Gap in Holocene Age Resolution (years)" , expand=c(0,0)) +
scale_y_continuous(name="Count of Records", oob=scales::squish,expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')# legend.position = c(0.5,0.7))
#legend.title = element_blank())#,legend.position = c(0.5,0.6))#
plotTimeData <- plotTimeAvailabilityTs(lipd,age.range = c(0,18000),step=200,group='PassFail')
plotTime <- ggplot(plotTimeData$data,aes(yvec,value))+
geom_rect(aes(xmin = 0, xmax = 12000, ymin = -Inf, ymax = Inf), fill = "grey",alpha=0.3) +
geom_area(alpha=1,aes(fill=group),color='Black',size=0.2)+
scale_fill_manual(values=c('yellow','red','green')) +
scale_x_reverse(name = "Age (yr BP)", limits=c(18000,0),expand=c(0,0))  +
scale_y_continuous(name = "Count of Records",expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank())#,legend.position = 'none')# legend.position = c(0.5,0.7))
proxyDataPrj   <- SpatialPointsDataFrame(proxyDf[,c("longitude", "latitude")], proxyDf, proj4string=CRS(PROJorig))
proxyDataPrj   <- spTransform(proxyDataPrj, CRSobj = PROJ)
refrenceSubset <-       subset(refregions, Acronym %in% proxyDf$ipccReg)
refrenceSubsetSelect <- subset(refregions, Acronym %in% (proxyDf %>%
group_by(ipccReg) %>%
summarize(count=n()) %>%
filter(count >= 6))$ipccReg)
dataTable <- fortify(refrenceSubset)
dataTable$Count     <- NA
dataTable$CountName <- NA
dataTable$Region    <- NA
#Set Breaks and color scheme with lowest group as grey
figBreaks <- c(5,10,20,30,40,60,80)
figlabels <- c(paste("<",figBreaks[1]+1),
paste(as.character(figBreaks[-length(figBreaks)]+1),"-",
as.character(figBreaks[-1])),
paste(">",figBreaks[length(figBreaks)]))
figPalette <- c("#CCCCCC",RColorBrewer::brewer.pal(n = 7, name = "YlOrBr"))
for (region in list(levels(refrenceSubset@data[["Acronym"]]))[[1]]){
i = which(refregions@data[["Acronym"]]==region)
count <- length(which(proxyDf$ipccReg==region))
if (count == 0){         countName <- NA
} else if (count <= figBreaks[1]){ countName <- 0
} else if (count <= figBreaks[2]){ countName <- 1
} else if (count <= figBreaks[3]){ countName <- 2
} else if (count <= figBreaks[4]){ countName <- 3
} else if (count <= figBreaks[5]){ countName <- 4
} else if (count <= figBreaks[6]){ countName <- 5
} else if (count <= figBreaks[7]){ countName <- 6
} else {countName <- 7}
dataTable$Count[which(dataTable$id==as.character(i-1))]     <- count
dataTable$CountName[which(dataTable$id==as.character(i-1))] <- countName
dataTable$Region[which(dataTable$id==as.character(i-1))]    <-region
}
proxyMapSites <- basemap +
geom_map(data=refrenceSubset, map=dataTable, alpha=0.75, size=0.3, color='black' ,
aes(x=long, y=lat, group=group, map_id=id),fill=NA,linetype = "dashed") +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Fail"),],
aes(x=longitude.1 , y=latitude.1),color='Red',shape = 1, size = 1,stroke=0.5) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Close"),],
aes(x=longitude.1 , y=latitude.1),color='Yellow',shape = 1, size = 2,stroke=1) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Pass"),],
aes(x=longitude.1 , y=latitude.1),color='Green',shape = 1, size = 3,stroke=1.5) +
coord_map(projection = PROJ) +
coord_cartesian(xlim = range(as.data.frame(proxyDataPrj)$longitude.1), ylim = range(as.data.frame(proxyDataPrj)$latitude.1))+
#scale_starshape_manual(values=plotSettings$shapes,name= 'Proxy Category') +
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
panel.background = element_rect(fill = 'white',color='Black'),
legend.background =  element_rect(fill = alpha('white', 0.85),size=0.5),#alpha=0.5),
legend.position  = 'none')#,legend.position = 'none')# legend.position = c(0.5,0.7))
proxyMapSites
compositePlot <- ggdraw(ggplot() +
ggtitle(paste(dataset,' Summary Page \n (',
'Pass = ',as.character(sum(proxyDf$PassFail == "Pass")),'; ',
'\n Close (MaxAgeControlSpread<5ka with 5+ Dates) = ',as.character(sum(proxyDf$PassFail == "Close")),'; ',
'\n Fail = ',as.character(sum(proxyDf$PassFail == "Fail")),')',sep=''))+
theme(plot.background= element_rect(colour='White',fill='White'),
panel.background = element_rect(colour='White',fill='White')))+
draw_plot(plotTime, x = 0.6, y = 0.74, width = 0.4, height = 0.25) +
draw_plot(plotRange, x = 0.6, y = 0.5, width = 0.4, height = 0.25) +
draw_plot(plotResPlus, x = 0.6, y = 0.25, width = 0.4, height = 0.25) +
draw_plot(plotAgeControl, x = 0.6, y = 0, width = 0.4, height = 0.25) +
draw_plot(proxyMapSites,  x = 0,   y = 0.15, width = 0.6, height = 0.7)
#ggsave(compositePlot,filename = paste("C://Users/clh624/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
ggsave(compositePlot,filename = paste("/Users/chrishancock/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
#Dataset Dashboard
dataset='LegacyClimate'
lipd <- TS_Poll
colors  = c("forestgreen")
proxyDf <- tibble(dataset       = pullTsVariable(lipd,'dataSetName'),
tsid          = pullTsVariable(lipd,'paleoData_TSid'),
PassFail      = pullTsVariable(lipd,'PassFail'),
longitude     = pullTsVariable(lipd,'geo_longitude'),
latitude      = pullTsVariable(lipd,'geo_latitude'),
ipccReg       = pullTsVariable(lipd,'geo_ipccRegion'),
archive       = pullTsVariable(lipd,'archiveType'),
proxy         = rep('Pollen',length(pullTsVariable(lipd,'archiveType'))),
minAge        = pullTsVariable(lipd,'ageMin'),
maxAge        = pullTsVariable(lipd,'ageMax'),
recordRange   = pullTsVariable(lipd,'ageRange'),
recordRes     = pullTsVariable(lipd,'ageRes'),
recordResPlus = pullTsVariable(lipd,'ageResPlus'),
AgeControlMax = pullTsVariable(lipd,'AgeControlMax'),
AgeControlN   = pullTsVariable(lipd,'AgeControlN'),
climInterp    = pullTsVariable(lipd,'climateInterpretation1_variable'))
plotRange <- ggplot(proxyDf)+
geom_rect(aes(xmin = 4000, xmax = 12000, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.6) +
geom_histogram(aes(recordRange,fill=proxy),alpha=0.7,binwidth = 300) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Record Length (years)",
limits=c(0,12000),expand=c(0,0),breaks=seq(0,12000,2000)) +
scale_y_continuous(name = "Count of Records",oob=scales::squish,expand=c(0,0)) +
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')#legend.title = element_blank())#,legend.position = c(0.5,0.6))#legend.position = 'none')#
plotResPlus <- ggplot(proxyDf)+
geom_rect(aes(xmin = 0, xmax = 400, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.6) +
geom_histogram(aes(recordRes,fill=proxy),alpha=0.7,binwidth = 50) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Median Sample Resolution (years/sample)" , expand=c(0,0)) +
scale_y_continuous(name="Count of Records", oob=scales::squish,expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')#legend.title = element_blank())#,legend.position = c(0.5,0.6))#legend.position = 'none')# legend.position = c(0.5,0.7))
plotAgeControl <- ggplot(proxyDf)+
geom_rect(aes(xmin = 0, xmax = 3000, ymin = -Inf, ymax = Inf), fill = "green",alpha=0.3) +
geom_rect(aes(xmin = 3000, xmax = 4000, ymin = -Inf, ymax = Inf), fill = "yellow",alpha=0.6) +
geom_histogram(aes(AgeControlMax,fill=proxy),alpha=0.7) +
scale_fill_manual(values=colors) +
scale_x_continuous(name = "Max Holocene Gap in Holocene Age Resolution (years)" , expand=c(0,0)) +
scale_y_continuous(name="Count of Records", oob=scales::squish,expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.position = 'none')# legend.position = c(0.5,0.7))
#legend.title = element_blank())#,legend.position = c(0.5,0.6))#
plotTimeData <- plotTimeAvailabilityTs(lipd,age.range = c(0,18000),step=200,group='PassFail')
plotTime <- ggplot(plotTimeData$data,aes(yvec,value))+
geom_rect(aes(xmin = 0, xmax = 12000, ymin = -Inf, ymax = Inf), fill = "grey",alpha=0.3) +
geom_area(alpha=1,aes(fill=group),color='Black',size=0.2)+
scale_fill_manual(values=c('yellow','red','green')) +
scale_x_reverse(name = "Age (yr BP)", limits=c(18000,0),expand=c(0,0))  +
scale_y_continuous(name = "Count of Records",expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.1, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank())#,legend.position = 'none')# legend.position = c(0.5,0.7))
proxyDataPrj   <- SpatialPointsDataFrame(proxyDf[,c("longitude", "latitude")], proxyDf, proj4string=CRS(PROJorig))
proxyDataPrj   <- spTransform(proxyDataPrj, CRSobj = PROJ)
refrenceSubset <-       subset(refregions, Acronym %in% proxyDf$ipccReg)
refrenceSubsetSelect <- subset(refregions, Acronym %in% (proxyDf %>%
group_by(ipccReg) %>%
summarize(count=n()) %>%
filter(count >= 6))$ipccReg)
dataTable <- fortify(refrenceSubset)
dataTable$Count     <- NA
dataTable$CountName <- NA
dataTable$Region    <- NA
#Set Breaks and color scheme with lowest group as grey
figBreaks <- c(5,10,20,30,40,60,80)
figlabels <- c(paste("<",figBreaks[1]+1),
paste(as.character(figBreaks[-length(figBreaks)]+1),"-",
as.character(figBreaks[-1])),
paste(">",figBreaks[length(figBreaks)]))
figPalette <- c("#CCCCCC",RColorBrewer::brewer.pal(n = 7, name = "YlOrBr"))
for (region in list(levels(refrenceSubset@data[["Acronym"]]))[[1]]){
i = which(refregions@data[["Acronym"]]==region)
count <- length(which(proxyDf$ipccReg==region))
if (count == 0){         countName <- NA
} else if (count <= figBreaks[1]){ countName <- 0
} else if (count <= figBreaks[2]){ countName <- 1
} else if (count <= figBreaks[3]){ countName <- 2
} else if (count <= figBreaks[4]){ countName <- 3
} else if (count <= figBreaks[5]){ countName <- 4
} else if (count <= figBreaks[6]){ countName <- 5
} else if (count <= figBreaks[7]){ countName <- 6
} else {countName <- 7}
dataTable$Count[which(dataTable$id==as.character(i-1))]     <- count
dataTable$CountName[which(dataTable$id==as.character(i-1))] <- countName
dataTable$Region[which(dataTable$id==as.character(i-1))]    <-region
}
proxyMapSites <- basemap +
geom_map(data=refrenceSubset, map=dataTable, alpha=0.75, size=0.3, color='black' ,
aes(x=long, y=lat, group=group, map_id=id),fill=NA,linetype = "dashed") +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Fail"),],
aes(x=longitude.1 , y=latitude.1),color='Red',shape = 1, size = 1,stroke=0.5) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Close"),],
aes(x=longitude.1 , y=latitude.1),color='Yellow',shape = 1, size = 2,stroke=1) +
geom_point(data= as.data.frame(proxyDataPrj)[which(as.data.frame(proxyDataPrj)$PassFail=="Pass"),],
aes(x=longitude.1 , y=latitude.1),color='Green',shape = 1, size = 3,stroke=1.5) +
coord_map(projection = PROJ) +
coord_cartesian(xlim = range(as.data.frame(proxyDataPrj)$longitude.1), ylim = range(as.data.frame(proxyDataPrj)$latitude.1))+
#scale_starshape_manual(values=plotSettings$shapes,name= 'Proxy Category') +
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'white',color='Black'),
panel.background = element_rect(fill = 'white',color='Black'),
legend.background =  element_rect(fill = alpha('white', 0.85),size=0.5),#alpha=0.5),
legend.position  = 'none')#,legend.position = 'none')# legend.position = c(0.5,0.7))
proxyMapSites
compositePlot <- ggdraw(ggplot() +
ggtitle(paste(dataset,' Summary Page \n (',
'Pass = ',as.character(sum(proxyDf$PassFail == "Pass")),'; ',
'\n Close = ',as.character(sum(proxyDf$PassFail == "Close")),'(MaxAgeControlSpread<4ka with 5+ Dates); ',
'\n Fail = ',as.character(sum(proxyDf$PassFail == "Fail")),')',sep=''))+
theme(plot.background= element_rect(colour='White',fill='White'),
panel.background = element_rect(colour='White',fill='White')))+
draw_plot(plotTime, x = 0.6, y = 0.74, width = 0.4, height = 0.25) +
draw_plot(plotRange, x = 0.6, y = 0.5, width = 0.4, height = 0.25) +
draw_plot(plotResPlus, x = 0.6, y = 0.25, width = 0.4, height = 0.25) +
draw_plot(plotAgeControl, x = 0.6, y = 0, width = 0.4, height = 0.25) +
draw_plot(proxyMapSites,  x = 0,   y = 0.15, width = 0.6, height = 0.7)
#ggsave(compositePlot,filename = paste("C://Users/clh624/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
ggsave(compositePlot,filename = paste("/Users/chrishancock/Desktop/",dataset,".png",sep=""),width = 10, height = 6, dpi = 600)
