for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)))
}
reg <- 'SAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)))
print(pltTimeAvail50)
}
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)))
print(pltTimeAvail50)
}
pltTimeAvail
which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct >= 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct >= 50)))
print(pltTimeAvail50)
}
which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct >= 50)
1+max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50))
which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1)
which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1
which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
print(pltTimeAvail50)
}
View(pltTimeAvail)
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
library(dplyr)
library(geoChronR)
library(lipdR)
library(maptools)
library(proj4)
library(sf)
library(sp)
library(tidyverse)
dir  <- getwd()# '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/HoloceneHydroclimate/HoloceneHydroclimate' #
var  <- 'HC'
save <- FALSE
saveDir <- file.path(dir,'Data','RegionComposites',var)
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
lipdData <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
lipdData <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
out <- vector(mode='list')
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
}
pltTimeAvail50range
lipdTable <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep='')))
lipdTable
lipdTable %>% filter(ipccReg==reg)
names(refregions)
as.vector(refregions$Acronym)
sort(as.vector(refregions$Acronym))
print(reg,out[[reg]][[var]]$nproxy)
print(out[[reg]][[var]]$nproxy)
print(paste(reg,"(n=",out[[reg]][[var]]$nproxy),")")
print(paste(reg,"(n=",as.character(out[[reg]][[var]]$nproxy)),")")
print(paste(reg,"(n=",as.character(23),")"))
print(paste(reg,"(n=",as.character(out[[reg]][[var]]$nproxy),")"))
print(paste(reg,"( n =",as.character(out[[reg]][[var]]$nproxy),")"))
print(paste(reg,"( n =",out[[reg]][[var]]$nproxy,")"))
out[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
#pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
#group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
#pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
#min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
#Model Data?
}
print(paste(reg,"( HC n =",out[[reg]][[var]]$nproxy,")"))
print(dim(out[[reg]][[var]]$SummaryDF))
}
out[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
#out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
#pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
#group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
#pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
#min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
#Model Data?
}
print(paste(reg,"( HC n =",out[[reg]][[var]]$nproxy,")"))
print(dim(out[[reg]][[var]]$SummaryDF))
}
out[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
#out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
#pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
#group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
#pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
#min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
#Model Data?
}
print(paste(reg,"( HC n =",out[[reg]][[var]]$nproxy,")"))
print(dim(out[[reg]][[var]]$SummaryDF))
}
?tryCatch
out[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
tryCatch(
expr = {
out[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)},
error = function(e){
out[[reg]][[var]]$SummaryDF <- NA}
)
#out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
#pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
#group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
#pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
#min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
#Model Data?
}
print(paste(reg,"( HC n =",out[[reg]][[var]]$nproxy,")"))
print(dim(out[[reg]][[var]]$SummaryDF))
}
out[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
if (out[[reg]][[var]]$nproxy > 0){
out[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
} else{out[[reg]][[var]]$SummaryDF <- NA
}
tryCatch(
expr = {
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))},
error = function(e){
out[[reg]][[var]]$compositeEnsemble <- NA}
)
#
#pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
#group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
#pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
#min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
#Model Data?
}
print(paste(reg,"( HC n =",out[[reg]][[var]]$nproxy,")"))
print(dim(out[[reg]][[var]]$SummaryDF))
}
out[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
if (out[[reg]][[var]]$nproxy > 0){
out[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
} else{out[[reg]][[var]]$SummaryDF <- NA
}
tryCatch(
expr = {
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))},
error = function(e){
out[[reg]][[var]]$compositeEnsemble <- NA}
)
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
#Model Data?
}
print(paste(reg,"( HC n =",out[[reg]][[var]]$nproxy,")"))
print(dim(out[[reg]][[var]]$SummaryDF))
}
out <- vector(mode='list')
out[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
if (out[[reg]][[var]]$nproxy > 0){
out[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
out[[reg]][[var]]$pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
} else{
out[[reg]][[var]]$SummaryDF <- NA
}
tryCatch(
expr = {
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))},
error = function(e){
out[[reg]][[var]]$compositeEnsemble <- NA}
)
#Model Data?
}
}
saveRDS(regionData,file.path(githubDir,'Data','FigureSettings',paste(regionData,'rds',sep='.')))
saveRDS(regionData,file.path(dir,'Data','FigureSettings',paste(regionData,'rds',sep='.')))
source('/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/Scripts/R/4_CreateRegionsRDS.R', echo=TRUE)
dir  <- getwd()# '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/HoloceneHydroclimate/HoloceneHydroclimate' #
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
lipdData  <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
regionData <- vector(mode='list')
regionData[[reg]] <- vector(mode='list')
for (reg in sort(as.vector(refregions$Acronym))){
regionData[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
regionData[[reg]]$name <- as.character(regionData[[reg]]$polygon$Name)
regionData[[reg]]$type <- as.character(regionData[[reg]]$polygon$Type)
regionData[[reg]]$latitude  <- regionData[[reg]]$polygon@polygons[[1]]@labpt[[1]]
regionData[[reg]]$longitude <- regionData[[reg]]$polygon@polygons[[1]]@labpt[[2]]
regionData[[reg]]$xadjust   <- NA
regionData[[reg]]$yadjust   <- NA
for (var in c('HC')){
regionData[[reg]][[var]] <- vector(mode='list')
regionData[[reg]][[var]]$LiPD   <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
regionData[[reg]][[var]]$nproxy <- length(regionData[[reg]][[var]]$LiPD)
if (regionData[[reg]][[var]]$nproxy > 0){
regionData[[reg]][[var]]$SummaryDF <- read.csv(file.path(dir,'Data','Proxy',paste('proxyMetadata_',var,'.csv',sep=''))) %>%
filter(ipccReg==reg)
pltTimeAvail <- plotTimeAvailabilityTs(regionData[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/regionData[[reg]][[var]]$nproxy,1))
regionData[[reg]][[var]]$pltTimeAvail50range <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
} else{
regionData[[reg]][[var]]$SummaryDF <- NA
}
tryCatch(
expr = {
regionData[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))},
error = function(e){
regionData[[reg]][[var]]$compositeEnsemble <- NA}
)
#Model Data?
}
}
#Americas
regionData[['GIC']]$xadjust  <-  0
regionData[['NWN']]$xadjust  <- -0.002
regionData[['NWN']]$yadjust  <- -0.02
regionData[['NEN']]$yadjust  <- -0.028
regionData[['NEN']]$xadjust  <- -0.002
regionData[['WNA']]$xadjust  <- -0.053
regionData[['CNA']]$xadjust  <-  0.007
regionData[['ENA']]$xadjust  <-  0.060
regionData[['NAS']]$xadjust  <- -0.04
regionData[['SCA']]$xadjust  <- -0.015
regionData[['CAR']]$xadjust  <-  0.03
regionData[['CAR']]$yadjust  <-  0.045
regionData[['NWS']]$xadjust  <- -0.01
regionData[['NSA']]$xadjust  <-  0.025
regionData[['NSA']]$yadjust  <-  0.048
regionData[['NES']]$yadjust  <-  0.022
regionData[['SAM']]$yadjust  <- -0.03
#Eruope/Africa
regionData[['NEU']]$xadjust  <-  0.015
regionData[['NEU']]$yadjust  <-  0.01
regionData[['WCE']]$xadjust  <- -0.005
regionData[['MED']]$xadjust  <- -0.02
regionData[['CAF']]$xadjust  <- -0.054
regionData[['NEAF']]$yadjust <-  0.002
regionData[['SEAF']]$yadjust <- -0.002
regionData[['WSAF']]$xadjust <- -0.032
regionData[['ESAF']]$xadjust <-  0.03
#Asia/Australasia
regionData[['ESB']]$yadjust <-  0.014
regionData[['ESB']]$xadjust <- -0.01
regionData[['RFE']]$xadjust <- -0.04
regionData[['WCA']]$xadjust <- -0.021
regionData[['ECA']]$xadjust <- -0.0035
regionData[['ECA']]$yadjust <-  0.015
regionData[['TIB']]$xadjust <-  0.003
regionData[['TIB']]$yadjust <- -0.007
regionData[['EAS']]$xadjust <-  0.021
regionData[['SAS']]$yadjust <- -0.02
regionData[['SAS']]$xadjust <-  0.0
regionData[['SEA']]$xadjust <- -0.017
regionData[['SAU']]$xadjust <- -0.044
regionData[['NZ']]$xadjust  <- -0.017
#Ocean
regionData[['EPO']]$xadjust <- -0.02
regionData[['ARO']]$xadjust <- -0.18
regionData[['ARO']]$yadjust <- -0.03
regionData[['NAO']]$yadjust <-  0.106
regionData[['NAO']]$xadjust <-  0.03
#Save--------------------------------------------------------------------------------
saveRDS(regionData,file.path(dir,'Data','FigureSettings',paste(regionData,'rds',sep='.')))
saveRDS(regionData,file.path(dir,'Data','FigureSettings','regionData.rds'))
basemap <- ggplot() +
#Set Border around plot - probably not the best way to do this
borders(aggregate(refregions, FUN=length), fill=NA, colour='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", colour="white", size=1)+
#Add Country data (basemap)
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill = "grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
lipdData  <- readRDS(file=file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
PROJ       <- "+proj=robin +lon_0=0 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs"
PROJorig   <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
refregions <- readShapePoly(file.path(dir,'Data','IPCC_refRegions','IPCC-WGI-reference-regions-v4.shp'),
proj4string=CRS(PROJorig))
dir  <- getwd()# '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/HoloceneHydroclimate/HoloceneHydroclimate' #
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
countries  <- getMap("less islands")
library(getMap)
?getMap
library(maptools)
countries  <- getMap("less islands")
library(rworldmap)
countries  <- getMap("less islands")
countries  <- rworldmap::getMap("less islands")
countries  <- spTransform(countries,  CRSobj = PROJ)
lipdData  <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
dir
dir<-"/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate"
library(getMap)
dir  <- getwd()# '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/HoloceneHydroclimate/HoloceneHydroclimate' #
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
countries  <- rworldmap::getMap("less islands")
countries  <- spTransform(countries,  CRSobj = PROJ)
lipdData  <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
dir  <- getwd()
dir  <- '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate' #
dir  <- getwd()
dir  <- '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate' #
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
countries  <- rworldmap::getMap("less islands")
countries  <- spTransform(countries,  CRSobj = PROJ)
lipdData  <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
var    <- 'HC'
lipdTSO <- lipdData[[var]]
proxyDf <- read.csv(file=file.path(dir,'Data','Proxy',paste('proxyMetaData_',var,'.csv',sep='')))
