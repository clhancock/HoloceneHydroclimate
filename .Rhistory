theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
}
rownames(compositeEnsemble)
row.names(compositeEnsemble)
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000),],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
binYears[1:which(binYears==12000)]
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000)],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
#Set up data to add once regional composite is calculated
compositeEnsemble <- vector(mode='list')
medianCompositeTS <- data_frame(time=binYears)
#Loop to composite (by region)
for (reg in c(regNames)) {
lipdReg  <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
for (i in 1:length(lipdReg)){
if (lipdReg[[i]]$climateInterpretation1_interpDirection == 'negative'){
lipdReg[[i]]$paleoData_values <- lipdReg[[i]]$paleoData_values*-1
}
}
set.seed(5) #Reproducibility
ensOut <- foreach(i = 1:nens) %dopar% {
tc <- compositeEnsembles(fTS                  = lipdReg,
binvec               = binvec,
stanFun              = standardizeMeanIteratively,
binFun               = simpleBinTs,
ageVar               = "age",
alignInterpDirection = FALSE,
spread               = TRUE,
duration             = searchDur,
searchRange          = c(1000,9000),
normalizeVariance    = std,
minN                 = 3)
return(list(composite = tc$composite,count = tc$count))
}
regionComposite           <- as.matrix(purrr::map_dfc(ensOut,magrittr::extract,"composite"))
rownames(regionComposite) <- binYears
compositeEnsemble[[reg]]  <- regionComposite[1:which(binYears==12000),]
medianCompositeTS[[reg]]  <- apply(regionComposite,1,median,na.rm=TRUE)
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000)],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
}
View(medianCompositeTS)
View(compositeEnsemble[[reg]])
medianCompositeTS <- data_frame(time=binYears[1:which(binYears==12000),])
medianCompositeTS <- data_frame(time=binYears[1:which(binYears==12000)])
#Loop to composite (by region)
for (reg in c(regNames)) {
lipdReg  <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
for (i in 1:length(lipdReg)){
if (lipdReg[[i]]$climateInterpretation1_interpDirection == 'negative'){
lipdReg[[i]]$paleoData_values <- lipdReg[[i]]$paleoData_values*-1
}
}
set.seed(5) #Reproducibility
ensOut <- foreach(i = 1:nens) %dopar% {
tc <- compositeEnsembles(fTS                  = lipdReg,
binvec               = binvec,
stanFun              = standardizeMeanIteratively,
binFun               = simpleBinTs,
ageVar               = "age",
alignInterpDirection = FALSE,
spread               = TRUE,
duration             = searchDur,
searchRange          = c(1000,9000),
normalizeVariance    = std,
minN                 = 3)
return(list(composite = tc$composite,count = tc$count))
}
regionComposite           <- as.matrix(purrr::map_dfc(ensOut,magrittr::extract,"composite"))
rownames(regionComposite) <- binYears
compositeEnsemble[[reg]]  <- regionComposite[1:which(binYears==12000),]
medianCompositeTS[[reg]]  <- apply(regionComposite,1,median,na.rm=TRUE)
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000),],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
}
#Set up data to add once regional composite is calculated
compositeEnsemble <- vector(mode='list')
medianCompositeTS <- data_frame(time=binYears[1:which(binYears==12000)])
#Loop to composite (by region)
for (reg in c(regNames)) {
lipdReg  <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
for (i in 1:length(lipdReg)){
if (lipdReg[[i]]$climateInterpretation1_interpDirection == 'negative'){
lipdReg[[i]]$paleoData_values <- lipdReg[[i]]$paleoData_values*-1
}
}
set.seed(5) #Reproducibility
ensOut <- foreach(i = 1:nens) %dopar% {
tc <- compositeEnsembles(fTS                  = lipdReg,
binvec               = binvec,
stanFun              = standardizeMeanIteratively,
binFun               = simpleBinTs,
ageVar               = "age",
alignInterpDirection = FALSE,
spread               = TRUE,
duration             = searchDur,
searchRange          = c(1000,9000),
normalizeVariance    = std,
minN                 = 3)
return(list(composite = tc$composite,count = tc$count))
}
regionComposite           <- as.matrix(purrr::map_dfc(ensOut,magrittr::extract,"composite"))
rownames(regionComposite) <- binYears
regionComposite           <- regionComposite[1:which(binYears==12000),]
compositeEnsemble[[reg]]  <- regionComposite
medianCompositeTS[[reg]]  <- apply(regionComposite,1,median,na.rm=TRUE)
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000),],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
}
View(regionComposite)
regionComposite           <- as.matrix(purrr::map_dfc(ensOut,magrittr::extract,"composite"))
rownames(regionComposite) <- binYears
regionComposite           <- regionComposite[1:which(binYears==12000),]
compositeEnsemble[[reg]]  <- regionComposite
medianCompositeTS[[reg]]  <- apply(regionComposite,1,median,na.rm=TRUE)
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000),],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
dim( compositeEnsemble[[reg]])
length(binYears)
length(binYears[1:which(binYears==12000),])
nens          <- 3     #Ensemble numbers (lower = faster)
binsize       <- 100     #years (median resolution = 107yrs)
ageMin        <- 0       #age BP
ageMax        <- 12400   #age BP
searchDur     <- 4000    #yrs (for 3 lake deposit data points)
nThresh       <- 40       #minimum no. of records, else skip
#Set bin vectors
binvec   <- seq(ageMin-binsize/2, to = ageMax+binsize/2, by = binsize)
binYears <- rowMeans(cbind(binvec[-1],binvec[-length(binvec)]))
#ID regions to reconstruct based on number of records (nThresh)
regNames <- data.frame(name=pullTsVariable(lipdTSO,'geo_ipccRegion')) %>%
group_by(name) %>%
summarise(n = n()) %>%
filter(n >= nThresh)
regNames <- c(as.character(regNames$name))#,'EAN','SSA') #Add 2 SH regions with fewer records to gain global coverage
#Set up data to add once regional composite is calculated
compositeEnsemble <- vector(mode='list')
medianCompositeTS <- data_frame(time=binYears[1:which(binYears==12000)])
#Loop to composite (by region)
for (reg in c(regNames)) {
lipdReg  <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
for (i in 1:length(lipdReg)){
if (lipdReg[[i]]$climateInterpretation1_interpDirection == 'negative'){
lipdReg[[i]]$paleoData_values <- lipdReg[[i]]$paleoData_values*-1
}
}
set.seed(5) #Reproducibility
ensOut <- foreach(i = 1:nens) %dopar% {
tc <- compositeEnsembles(fTS                  = lipdReg,
binvec               = binvec,
stanFun              = standardizeMeanIteratively,
binFun               = simpleBinTs,
ageVar               = "age",
alignInterpDirection = FALSE,
spread               = TRUE,
duration             = searchDur,
searchRange          = c(1000,9000),
normalizeVariance    = std,
minN                 = 3)
return(list(composite = tc$composite,count = tc$count))
}
regionComposite           <- as.matrix(purrr::map_dfc(ensOut,magrittr::extract,"composite"))
rownames(regionComposite) <- binYears
regionComposite           <- regionComposite[1:which(binYears==12000),]
compositeEnsemble[[reg]]  <- regionComposite
medianCompositeTS[[reg]]  <- apply(regionComposite,1,median,na.rm=TRUE)
#plot region to confirm that everything looks good
plotTimeseriesEnsRibbons(X = binYears[1:which(binYears==12000)],Y = compositeEnsemble[[reg]])+
scale_x_continuous(name = "age (yr BP)",         oob = scales::squish)+
scale_y_continuous(name = "Standardized Anomaly",oob = scales::squish)+
theme_bw()+
ggtitle(paste(reg,"Composite Ensemble"))
}
View((compositeEnsemble[[reg]])
)
data.frame(name=pullTsVariable(lipdTSO,'geo_ipccRegion')) %>%
group_by(name) %>%
summarise(n = n()) %>%
filter(n >= nThresh)
nThresh       <- 3       #minimum no. of records, else skip
#ID regions to reconstruct based on number of records (nThresh)
regNames <- data.frame(name=pullTsVariable(lipdTSO,'geo_ipccRegion')) %>%
group_by(name) %>%
summarise(n = n()) %>%
filter(n >= nThresh)
regNames
View(regNames)
out <- vector(mode='list')
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
refregions[refregions$Acronym==reg]
dir  <- getwd()# '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/HoloceneHydroclimate/HoloceneHydroclimate' #
var  <- 'HC'
save <- FALSE
saveDir <- file.path(dir,'Data','RegionComposites',var)
PROJ <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
library(lipdR)
library(maptools)
library(proj4)
library(sf)
library(sp)
library(tidyverse)
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
out <- vector(mode='list')
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
refregions[refregions$Acronym==reg]
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
install.packages("rgdal")
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'))
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
out <- vector(mode='list')
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
refregions[refregions$Acronym==reg]
names(refregions)
refregions[[1]]
refregions[refregions@data$Acronym == reg, ]
out[[reg]]$Polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$Polygon$Name
out[[reg]] <- vector(mode='list')
out[[reg]]$geo_polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$geo_polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$geo_polygon$Type)
View(out[[reg]]$geo_polygon)
out[[reg]]$geo_polygon@polygons[[1]]@labpt
out[[reg]]$geo_polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$T <- vector(mode='list')
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- lipdData[[var]][[reg]]
lipdData <- readRDS(file.path(dir,'Data','Proxy','LiPD','lipdData.rds'))
out[[reg]][[var]]$LiPD <- lipdData[[var]][[reg]]
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
View(Out)
View(uut)
View(out)
var
var<-T
var<-'T'
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- lipdData[[var]][[reg]]
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
View(out
View(out)
View(out)
View(lipdData)
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltT <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
library(geoChronR)
pltT <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
timeN <- pltT$dat %>% group_by(yvec)  %>% summarise(count=sum(value),nPct=sum(value)/length(regTso))
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
out[[reg]][[var]]$pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- out[[reg]][[var]]$pltTimeAvail %>%
group_by(yvec) %>%
summarise(count=sum(value),nPct=sum(value)/length(out[[reg]][[var]]$nproxy))
}
library(dplyr)
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
out[[reg]][[var]]$pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- out[[reg]][[var]]$pltTimeAvail %>%
group_by(yvec) %>%
summarise(count=sum(value),nPct=sum(value)/length(out[[reg]][[var]]$nproxy))
}
out[[reg]][[var]]$pltTimeAvail <- out[[reg]][[var]]$pltTimeAvail$dat %>%
group_by(yvec) %>%
summarise(count=sum(value),nPct=sum(value)/length(out[[reg]][[var]]$nproxy))
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
out[[reg]][[var]]$pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- out[[reg]][[var]]$pltTimeAvail$dat %>%
group_by(yvec) %>%
summarise(count=sum(value),nPct=sum(value)/length(out[[reg]][[var]]$nproxy))
}
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value),nPct=sum(value)/length(out[[reg]][[var]]$nproxy))
}
out[[reg]][[var]]$pltTimeAvail
out[[reg]][[var]]$nproxy
pltTimeAvail$dat %>% group_by(yvec)
pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value))
pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value),nPct=(sum(value)/length(out[[reg]][[var]]$nproxy)))
length(out[[reg]][[var]]$nproxy)
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value),nPct=sum(value)/out[[reg]][[var]]$nproxy)
}
out[[reg]][[var]]$pltTimeAvail
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy),1)
}
out[[reg]][[var]]$pltTimeAvail
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
}
pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1)
)
out[[reg]][[var]]$pltTimeAvail
out[[reg]][[var]]$pltTimeAvail$nPct
which(out[[reg]][[var]]$pltTimeAvail$nPct<70)
reg <- 'SAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)
out[[reg]][[var]]$pltTimeAvail <- pltTimeAvail$dat %>% group_by(yvec) %>%
summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
}
out[[reg]][[var]]$pltTimeAvail$nPct
which(out[[reg]][[var]]$pltTimeAvail$nPct<50)
out[[reg]][[var]]$pltTimeAvail
which(out[[reg]][[var]]$pltTimeAvail$yvec<6000)
which(out[[reg]][[var]]$pltTimeAvail$yvec<6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50)
which(out[[reg]][[var]]$pltTimeAvail$yvec>6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50)
which(out[[reg]][[var]]$pltTimeAvail$yvec<6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50)
max(1,which(out[[reg]][[var]]$pltTimeAvail$yvec<6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50))
min(1,which(out[[reg]][[var]]$pltTimeAvail$yvec>6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50))
min(nrow((out[[reg]][[var]]$pltTimeAvail),which(out[[reg]][[var]]$pltTimeAvail$yvec>6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50))
)
min(nrow((out[[reg]][[var]]$pltTimeAvail)),which(out[[reg]][[var]]$pltTimeAvail$yvec>6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50))
min(nrow(out[[reg]][[var]]$pltTimeAvail),which(out[[reg]][[var]]$pltTimeAvail$yvec>6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50))
min <- min(nrow(out[[reg]][[var]]$pltTimeAvail),which(out[[reg]][[var]]$pltTimeAvail$yvec>6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50))
max <- max(1,which(out[[reg]][[var]]$pltTimeAvail$yvec<6000 & out[[reg]][[var]]$pltTimeAvail$nPct < 50))
min
max
reg <- 'SAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)))
}
reg <- 'SAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)))
print(pltTimeAvail50)
}
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)))
print(pltTimeAvail50)
}
pltTimeAvail
which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(1,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct >= 50)),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct >= 50)))
print(pltTimeAvail50)
}
which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct >= 50)
1+max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50))
which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1)
which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1
which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)
reg <- 'EAS'
out[[reg]] <- vector(mode='list')
out[[reg]]$polygon <- refregions[refregions@data$Acronym == reg, ]
out[[reg]]$name <- as.character(out[[reg]]$polygon$Name)
out[[reg]]$type <- as.character(out[[reg]]$polygon$Type)
out[[reg]]$latitude  <- out[[reg]]$polygon@polygons[[1]]@labpt[[1]]
out[[reg]]$longitude <- out[[reg]]$polygon@polygons[[1]]@labpt[[2]]
out[[reg]]$xadjust   <- NA
out[[reg]]$yadjust   <- NA
for (var in c('T','HC')){
out[[reg]][[var]] <- vector(mode='list')
out[[reg]][[var]]$LiPD <- filterTs(lipdData[[var]],paste('geo_ipccRegion ==',reg))
out[[reg]][[var]]$nproxy <- length(out[[reg]][[var]]$LiPD)
out[[reg]][[var]]$compositeEnsemble <- read.csv(file.path(dir,'Data','RegionComposites',var,paste(reg,'.csv',sep='')))
pltTimeAvail <- plotTimeAvailabilityTs(out[[reg]][[var]]$LiPD,age.range=c(0,12000),group.var ='CategorySpecific',step=200)$dat %>%
group_by(yvec) %>% summarise(count=sum(value),nPct=round(100*sum(value)/out[[reg]][[var]]$nproxy,1))
pltTimeAvail50 <- c(max(0,which(pltTimeAvail$yvec<6000 & pltTimeAvail$nPct < 50)+1),
min(nrow(pltTimeAvail),which(pltTimeAvail$yvec>6000 & pltTimeAvail$nPct < 50)-1))
print(pltTimeAvail50)
}
View(pltTimeAvail)
