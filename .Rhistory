#which(regNames=reg)
#Load PCA data
#pca <- readRDS(file.path(githubDir,'Data','RegionComposites','PCA','pcaHC12k.rds'))
# plotPcaEns(pca)
pc <- 1
dataTable <- fortify(refrenceSubset)
dataTable$Count     <- NA
for (reg in list(levels(refrenceSubset@data[["Acronym"]]))[[1]]){
i = which(refregions@data[["Acronym"]]==reg)
loading <- apply(pca[["loadings"]][,pc,],1,median,na.rm=TRUE)[which(regNames==reg)]
dataTable$Count[which(dataTable$id==as.character(i-1))] <- loading
}
pcMapplot <- basemap +
#Add refrence regions boundaries
geom_map(data=refrenceSubset, map=dataTable, alpha=0.75, size=0.5, color='black' ,
aes(x=long, y=lat, group=group, map_id=id,fill=dataTable$Count)) +
scale_fill_binned(type = "viridis",name =paste('Loading (PC',pc,')',sep='')) +
theme(text = element_text(family='sans',size=12),
plot.background = element_rect(fill = 'white',color='White'),
plot.margin = unit(c(0.25, 0.25, 0.2, 0.2), "in"),
legend.position = c(0.5,0.12),
legend.direction='horizontal',
legend.box.background=element_rect(fill = 'white',color='Black'),
legend.box.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"),
legend.key.width=unit(30, 'points'),
legend.key.height=unit(8, 'points'))
pcTSplot <- ggplot() +
geom_line(aes(x=pca[["age"]]/1000,y=apply(pca[["PCs"]][,pc,],1,median,na.rm=TRUE)),
color='Black',size=1)+
labs(x='Age (yr BP)',y='Wet <    > Dry',subtitle=paste('PC',pc,sep='')) +
theme_bw() +
scale_x_reverse(name = "Age (ka BP)",
limits=c(12,0), expand=c(0,0), n.breaks=7) +
theme(text = element_text(family='sans',size=18),
plot.background = element_rect(fill = 'white',color='White'),
plot.margin = unit(c(0.25, 0.25, 0.2, 0.2), "in"))
ggsave(plot=pcTSplot, width = 6, height = 3, dpi = 600,
filename = paste(file.path(githubDir,'Figures','global_PC'),pc,'_TS.png',sep=''))
ggsave(plot=pcMapplot, width = 6, height = 3.5, dpi = 600,
filename = paste(file.path(githubDir,'Figures','global_PC'),pc,'_Map.png',sep=''))
#which(regNames=reg)
#Load PCA data
#pca <- readRDS(file.path(githubDir,'Data','RegionComposites','PCA','pcaHC12k.rds'))
# plotPcaEns(pca)
pc <- 2
dataTable <- fortify(refrenceSubset)
dataTable$Count     <- NA
for (reg in list(levels(refrenceSubset@data[["Acronym"]]))[[1]]){
i = which(refregions@data[["Acronym"]]==reg)
loading <- apply(pca[["loadings"]][,pc,],1,median,na.rm=TRUE)[which(regNames==reg)]
dataTable$Count[which(dataTable$id==as.character(i-1))] <- loading
}
pcMapplot <- basemap +
#Add refrence regions boundaries
geom_map(data=refrenceSubset, map=dataTable, alpha=0.75, size=0.5, color='black' ,
aes(x=long, y=lat, group=group, map_id=id,fill=dataTable$Count)) +
scale_fill_binned(type = "viridis",name =paste('Loading (PC',pc,')',sep='')) +
theme(text = element_text(family='sans',size=12),
plot.background = element_rect(fill = 'white',color='White'),
plot.margin = unit(c(0.25, 0.25, 0.2, 0.2), "in"),
legend.position = c(0.5,0.12),
legend.direction='horizontal',
legend.box.background=element_rect(fill = 'white',color='Black'),
legend.box.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"),
legend.key.width=unit(30, 'points'),
legend.key.height=unit(8, 'points'))
pcTSplot <- ggplot() +
geom_line(aes(x=pca[["age"]]/1000,y=apply(pca[["PCs"]][,pc,],1,median,na.rm=TRUE)),
color='Black',size=1)+
labs(x='Age (yr BP)',y='Wet <    > Dry',subtitle=paste('PC',pc,sep='')) +
theme_bw() +
scale_x_reverse(name = "Age (ka BP)",
limits=c(12,0), expand=c(0,0), n.breaks=7) +
theme(text = element_text(family='sans',size=18),
plot.background = element_rect(fill = 'white',color='White'),
plot.margin = unit(c(0.25, 0.25, 0.2, 0.2), "in"))
ggsave(plot=pcTSplot, width = 6, height = 3, dpi = 600,
filename = paste(file.path(githubDir,'Figures','global_PC'),pc,'_TS.png',sep=''))
ggsave(plot=pcMapplot, width = 6, height = 3.5, dpi = 600,
filename = paste(file.path(githubDir,'Figures','global_PC'),pc,'_Map.png',sep=''))
#which(regNames=reg)
#Load PCA data
#pca <- readRDS(file.path(githubDir,'Data','RegionComposites','PCA','pcaHC12k.rds'))
# plotPcaEns(pca)
githubDir <- '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/HoloceneHydroclimate/HoloceneHydroclimate' #getwd()
#Settings
plotSettings <- plotVals$specific
climVar <- 'HC'
lipdTSO <- readRDS(file.path(githubDir,'LiPD','lipdData.rds'))[[climVar]]
lipdTSO <- readRDS(file.path(githubDir,'Data','LiPD','lipdData.rds'))[[climVar]]
##############################
proxyMetaData <- tibble(dataset       = pullTsVariable(lipdTSO,'dataSetName'),
tsid          = pullTsVariable(lipdTSO,'paleoData_TSid'),
longitude     = pullTsVariable(lipdTSO,'geo_longitude'),
latitude      = pullTsVariable(lipdTSO,'geo_latitude'),
ipccReg       = pullTsVariable(lipdTSO,'geo_ipccRegion'),
Category      = pullTsVariable(lipdTSO,'Category'),
CategorySpec  = pullTsVariable(lipdTSO,'CategorySpecific'),
recordRange   = pullTsVariable(lipdTSO,'ageRange'),
recordRes     = pullTsVariable(lipdTSO,'ageRes'),
recordResPlus = pullTsVariable(lipdTSO,'ageResPlus'),
season        = pullTsVariable(lipdTSO,'climateInterpretation1_seasonalityGeneral'),
climInterp    = pullTsVariable(lipdTSO,'climateInterpretation1_variable'),
source        = pullTsVariable(lipdTSO,'Source'))
library(lipdR)
library(tibble)
##############################
proxyMetaData <- tibble(dataset       = pullTsVariable(lipdTSO,'dataSetName'),
tsid          = pullTsVariable(lipdTSO,'paleoData_TSid'),
longitude     = pullTsVariable(lipdTSO,'geo_longitude'),
latitude      = pullTsVariable(lipdTSO,'geo_latitude'),
ipccReg       = pullTsVariable(lipdTSO,'geo_ipccRegion'),
Category      = pullTsVariable(lipdTSO,'Category'),
CategorySpec  = pullTsVariable(lipdTSO,'CategorySpecific'),
recordRange   = pullTsVariable(lipdTSO,'ageRange'),
recordRes     = pullTsVariable(lipdTSO,'ageRes'),
recordResPlus = pullTsVariable(lipdTSO,'ageResPlus'),
season        = pullTsVariable(lipdTSO,'climateInterpretation1_seasonalityGeneral'),
climInterp    = pullTsVariable(lipdTSO,'climateInterpretation1_variable'),
source        = pullTsVariable(lipdTSO,'Source'))
?readShapePoly
library(rgdal)
library(sp)
library(maptools)
#write.csv(proxyMetaData,file=file.path(githubDir,'Data',paste('proxyMetaData_','T','.csv',sep='')))
refregions <- readShapePoly(file.path(localDir,'IPCC_refRegions','IPCC-WGI-reference-regions-v4.shp'),
proj4string=CRS(PROJorig))
#write.csv(proxyMetaData,file=file.path(githubDir,'Data',paste('proxyMetaData_','T','.csv',sep='')))
refregions <- readShapePoly(file.path(githubDir,'Data','IPCC_refRegions','IPCC-WGI-reference-regions-v4.shp'),
proj4string=CRS(PROJorig))
refregions <-  spTransform(refregions, CRSobj = PROJ)
countries  <- getMap("less islands")
#write.csv(proxyMetaData,file=file.path(githubDir,'Data',paste('proxyMetaData_','T','.csv',sep='')))
refregions <- readShapePoly(file.path(githubDir,'Data','IPCC_refRegions','IPCC-WGI-reference-regions-v4.shp'),
proj4string=CRS(PROJorig))
refregions <-  spTransform(refregions, CRSobj = PROJ)
countries  <- getMap("less islands")
countries  <- spTransform(countries,  CRSobj = PROJ)
reg <- levels(refregions@data[["Acronym"]])[regNo]
regNo <- 1
print(reg)
count <- count+1
stack.df <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
if (length(stack.df) == 0){next}
stack.df <- tidyTs(stack.df,age.var = "age") %>%
filter(between(age,0,12000)) %>% #only years from Holocene
group_by(paleoData_TSid) %>% #group by column
arrange(geo_latitude)
stackColors <- c()
for (category in unique(stack.df$CategorySpecific)){
stackColors <- c(stackColors,
plotSettings$colors[which(plotSettings$names == category)])
}
levels(refregions@data[["Acronym"]])[regNo]
as.numeric(refregions@data[["Acronym"]])
which(as.numeric(refregions@data[["Acronym"]])=reg)
which(as.numeric(refregions@data[["Acronym"]])==reg)
which(as.numeric(refregions@data[["Acronym"]])==regNo)
count <- which(as.numeric(refregions@data[["Acronym"]])==regNo)
stack.df <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
if (length(stack.df) == 0){next}
stack.df <- tidyTs(stack.df,age.var = "age") %>%
filter(between(age,0,12000)) %>% #only years from Holocene
group_by(paleoData_TSid) %>% #group by column
arrange(geo_latitude)
stackColors <- c()
for (category in unique(stack.df$CategorySpecific)){
stackColors <- c(stackColors,
plotSettings$colors[which(plotSettings$names == category)])
}
#
#Stack Plot
#
stackPlot <- plotTimeseriesStack(stack.df,
time.var = "age",
color.var =  "CategorySpecific",
invert.var = 'climateInterpretation1_interpDirection',
color.ramp = stackColors) +
scale_x_reverse(name = "Age (yr BP)", limits=c(12000,0),expand=c(0,0),
n.breaks=7,sec.axis = sec_axis(~.,labels=NULL))
library(geoChronR)
library(lipdR) #to read and interact with LiPD data
library(geoChronR) #for plotting mostly
library(magrittr) #we'll be using the magrittr pipe ( %>% ) for simplicity
library(dplyr) #and dplyr for data.frame manipulation
library(ggplot2)
library(cowplot)
library(geoChronR)
library(ggplot2)
library(ggstar)
library(lipdR)
library(maptools)
library(proj4)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(sp)
library(tidyverse)
reg <- levels(refregions@data[["Acronym"]])[regNo]
print(reg)
count <- which(as.numeric(refregions@data[["Acronym"]])==regNo)
stack.df <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
if (length(stack.df) == 0){next}
stack.df <- tidyTs(stack.df,age.var = "age") %>%
filter(between(age,0,12000)) %>% #only years from Holocene
group_by(paleoData_TSid) %>% #group by column
arrange(geo_latitude)
stackColors <- c()
for (category in unique(stack.df$CategorySpecific)){
stackColors <- c(stackColors,
plotSettings$colors[which(plotSettings$names == category)])
}
#
#Stack Plot
#
stackPlot <- plotTimeseriesStack(stack.df,
time.var = "age",
color.var =  "CategorySpecific",
invert.var = 'climateInterpretation1_interpDirection',
color.ramp = stackColors) +
scale_x_reverse(name = "Age (yr BP)", limits=c(12000,0),expand=c(0,0),
n.breaks=7,sec.axis = sec_axis(~.,labels=NULL))
regNo <- 20
reg <- levels(refregions@data[["Acronym"]])[regNo]
print(reg)
count <- which(as.numeric(refregions@data[["Acronym"]])==regNo)
stack.df <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
if (length(stack.df) == 0){next}
stack.df <- tidyTs(stack.df,age.var = "age") %>%
filter(between(age,0,12000)) %>% #only years from Holocene
group_by(paleoData_TSid) %>% #group by column
arrange(geo_latitude)
stackColors <- c()
for (category in unique(stack.df$CategorySpecific)){
stackColors <- c(stackColors,
plotSettings$colors[which(plotSettings$names == category)])
}
#
#Stack Plot
#
stackPlot <- plotTimeseriesStack(stack.df,
time.var = "age",
color.var =  "CategorySpecific",
invert.var = 'climateInterpretation1_interpDirection',
color.ramp = stackColors) +
scale_x_reverse(name = "Age (yr BP)", limits=c(12000,0),expand=c(0,0),
n.breaks=7,sec.axis = sec_axis(~.,labels=NULL))
stackPlot
?plotTimeseriesStack
#
#Region map
#
proxyDataPrj <- SpatialPointsDataFrame(stack.df[,c("geo_longitude", "geo_latitude")],
stack.df, proj4string=CRS(PROJorig))
proxyDataPrj <- spTransform(proxyDataPrj, CRSobj = PROJ)
proxyDFprj   <- as.data.frame(proxyDataPrj)
idx <- which(plotSettings$names %in% unique(proxyDFprj$CategorySpecific))
refrenceRegShp <- subset(refregions, Acronym ==reg)
regMap <-  ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5) +
scale_fill_manual(values=plotSettings$colors[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shapes[idx],name= 'Proxy Category') +
theme_void() +
theme(legend.position = 'none')
regMap
#
#Region map
#
proxyDataPrj <- SpatialPointsDataFrame(stack.df[,c("geo_longitude", "geo_latitude")],
stack.df, proj4string=CRS(PROJorig))
proxyDataPrj <- spTransform(proxyDataPrj, CRSobj = PROJ)
proxyDFprj   <- as.data.frame(proxyDataPrj)
idx <- which(plotSettings$names %in% unique(proxyDFprj$CategorySpecific))
refrenceRegShp <- subset(refregions, Acronym ==reg)
regMap <-  ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5) +
scale_fill_manual(values=plotSettings$colors[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shapes[idx],name= 'Proxy Category') +
theme_void() +
theme(legend.position = 'none')
regMap
ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4)
ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5) +
scale_fill_manual(values=plotSettings$colors[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shapes[idx],name= 'Proxy Category') +
theme_void()
regMap <-  ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') + theme(legend.position = 'none')
regMap
ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4)
ggplot() +
#  geom_map(data=countries, map=fortify(countries),
#      aes(x=long, y=lat, group=group, map_id=id),
#      fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat))
ggplot() +
#  geom_map(data=countries, map=fortify(countries),
#      aes(x=long, y=lat, group=group, map_id=id),
#      fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black')
ggplot() +
#  geom_map(data=countries, map=fortify(countries),
#      aes(x=long, y=lat, group=group, map_id=id),
#      fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5)
ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5) +
scale_fill_manual(values=plotSettings$colors[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shapes[idx],name= 'Proxy Category') +
theme_void()
refregions <- readShapePoly(file.path(githubDir,'Data','IPCC_refRegions','IPCC-WGI-reference-regions-v4.shp'),
proj4string=CRS(PROJorig))
refregions <-  spTransform(refregions, CRSobj = PROJ)
countries  <- getMap("less islands")
countries  <- spTransform(countries,  CRSobj = PROJ)
#
#Region map
#
proxyDataPrj <- SpatialPointsDataFrame(stack.df[,c("geo_longitude", "geo_latitude")],
stack.df, proj4string=CRS(PROJorig))
proxyDataPrj <- spTransform(proxyDataPrj, CRSobj = PROJ)
proxyDFprj   <- as.data.frame(proxyDataPrj)
idx <- which(plotSettings$names %in% unique(proxyDFprj$CategorySpecific))
refrenceRegShp <- subset(refregions, Acronym ==reg)
regMap <-  ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5) +
scale_fill_manual(values=plotSettings$colors[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shapes[idx],name= 'Proxy Category') +
theme_void() +
theme(legend.position = 'none')
regMap
regMap
ggsave(file.path(localDir,'Figures','Dashboard',
paste(count,'_',reg,'__regMap.png',sep='')),
plot=regMap,device='png',width=5,height=5,units='in')
ggsave(file.path(githubDir,'Figures','Dashboard',
paste(count,'_',reg,'__regMap.png',sep='')),
plot=regMap,device='png',width=5,height=5,units='in')
regMap <-  ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5) +
scale_fill_manual(values=plotSettings$colors[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shapes[idx],name= 'Proxy Category') +
theme_void() +
theme(legend.position = 'none',
plot.background = element_rect(fill = 'white',color='Black'))
regMap
ggsave(file.path(githubDir,'Figures','Dashboard',
paste(count,'_',reg,'__regMap.png',sep='')),
plot=regMap,device='png',width=5,height=5,units='in')
ggsave(file.path(githubDir,'Figures','Dashboard','_Summary',
paste(count,'_',reg,'__regMap.png',sep='')),
plot=regMap,device='png',width=5,height=5,units='in')
ggsave(file.path(githubDir,'Figures','Dashboard','_Summary',
paste(count,'_',reg,'__stackPlot.png',sep='')),
plot=regMap,device='png',width=8.5,height=11,units='in')
ggsave(file.path(githubDir,'Figures','Dashboard','_Summary',
paste(count,'_',reg,'__stackPlot.png',sep='')),
plot=stackPlot,device='png',width=8.5,height=11,units='in')
as.numeric(refregions@data[["Acronym"]])
levels(refregions@data[["Acronym"]])
reg <- 'WNA'
print(reg)
count <- which(as.numeric(refregions@data[["Acronym"]])==regNo)
#
#Stack Plot
#
stack.df <- filterTs(lipdTSO,paste('geo_ipccRegion ==',reg))
if (length(stack.df) == 0){next}
stack.df <- tidyTs(stack.df,age.var = "age") %>%
filter(between(age,0,12000)) %>% #only years from Holocene
group_by(paleoData_TSid) %>%     #group by column
arrange(geo_latitude)            #North to south
stackColors <- c()
#Get colors for categories within region
for (category in unique(stack.df$CategorySpecific)){
stackColors <- c(stackColors,plotSettings$colors[which(plotSettings$names == category)])
}
stackPlot <- plotTimeseriesStack(stack.df,
time.var = "age",
color.var =  "CategorySpecific",
invert.var = 'climateInterpretation1_interpDirection',
scale.factor= 0.1,
color.ramp = stackColors) +
scale_x_reverse(name = "Age (yr BP)", limits=c(12000,0),expand=c(0,0),
n.breaks=7,sec.axis = sec_axis(~.,labels=NULL))
#
#Region map
#
proxyDataPrj <- SpatialPointsDataFrame(stack.df[,c("geo_longitude", "geo_latitude")],
stack.df, proj4string=CRS(PROJorig))
proxyDataPrj <- spTransform(proxyDataPrj, CRSobj = PROJ)
proxyDFprj   <- as.data.frame(proxyDataPrj)
idx <- which(plotSettings$names %in% unique(proxyDFprj$CategorySpecific))
refrenceRegShp <- subset(refregions, Acronym ==reg)
regMap <-  ggplot() +
geom_map(data=countries, map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id),
fill = "grey80",color="grey90",size=0.4) +
coord_fixed(1,xlim= range(fortify(refrenceRegShp)$lon),
ylim=range(fortify(refrenceRegShp)$lat)) +
geom_map(data=refrenceRegShp, map=fortify(refrenceRegShp),
aes(x=long, y=lat, group=group, map_id=id),
fill=NA, alpha=0.75, size=0.5, color='black') +
geom_star(data=proxyDFprj,
aes(x=geo_longitude.1 , y=geo_latitude.1,
starshape=CategorySpecific, fill=CategorySpecific),
size=4,color='Black',alpha=1,starstroke=0.5) +
scale_fill_manual(values=plotSettings$colors[idx],name= 'Proxy Category') +
scale_starshape_manual(values=plotSettings$shapes[idx],name= 'Proxy Category') +
theme_void() +
theme(legend.position = 'none',
plot.background = element_rect(fill = 'white',color='Black'))
regMap
ggsave(file.path(githubDir,'Figures','Dashboard','_Summary',
paste(count,'_',reg,'__regMap.png',sep='')),
plot=regMap,device='png',width=5,height=5,units='in')
ggsave(file.path(githubDir,'Figures','Dashboard','_Summary',
paste(count,'_',reg,'__stackPlot.png',sep='')),
plot=stackPlot,device='png',width=8.5,height=11,units='in')
