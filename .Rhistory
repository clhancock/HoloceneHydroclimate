pctChronData = NA)
#Calc % of records with age control
summary <- proxyDf[which(!is.na(proxyDf$ageCtrlMax)),]
summary <- summary[which(summary$archive %in% c('Wood','GlacierIce') == FALSE),]
summary <- summary[which(summary$Category != 'Shoreline'),]
diff    <- as.character(round(100*(length(which(proxyDf$archive %in% c('Wood','GlacierIce'))
+ which(proxyDf$Category == 'Shoreline')))/nrow(proxyDf)))
pivot[12,'pctChronData'] <- as.character(round(100*nrow(summary)/nrow(proxyDf)))
pivot[12,'pctChronData'] <- paste0(pivot[12,'pctChronData'],'+',diff)
summary <- summary %>% group_by(CategorySpec) %>% dplyr::summarize(count =  n())
for (cat in summary$CategorySpec){
n   = summary[which(summary$CategorySpec==cat),2]
pct = 100*n/pivot[which(pivot$CategorySpec==cat),'count']
pivot[which(pivot$CategorySpec==cat),'pctChronData'] <- as.character(round(pct))
}
pivot
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap)
basemap
library(cowplot)
library(egg)
library(geoChronR)
library(ggrepel)
library(ggplot2)
library(ggstar)
library(lipdR)
library(maptools)
library(proj4)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(sp)
library(tidyverse)
print("Packages Loaded")
library(cowplot)
library(egg)
library(geoChronR)
library(ggrepel)
library(ggplot2)
library(ggstar)
library(lipdR)
library(maptools)
library(proj4)
library(RColorBrewer)
library(rworldmap)
library(scales)
library(sp)
library(tidyverse)
print("Packages Loaded")
#Set Working Directory
wd = '/Volumes/GoogleDrive/My Drive/zResearch/Manuscript/2021_HoloceneHydroclimate/2021_HoloceneHydroclimate/'
#knitr::opts_knit$set(root.dir = wd)
print(paste0('Working directory set to: ',wd))
lipdTSO <- readRDS(file.path(wd,'Data','Proxy','LiPD','lipdData.rds'))
proxyDf <- read.csv(file=file.path(wd,'Data','Proxy',paste0('proxyMetaData_','HC','.csv')))
print("Proxy metadata table loaded ")
#Set Projections
PROJ     <- '+proj=robin   +ellps=WGS84 +datum=WGS84 +no_defs +lon_0=0 +x_0=0 +y_0=0 +units=m'
PROJorig <- "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
#Load IPCC region data
load(url('https://github.com/SantanderMetGroup/ATLAS/blob/main/reference-regions/IPCC-WGI-reference-regions-v4_R.rda?raw=true'), verbose = TRUE)
#Transform projection
refregions <-  spTransform(IPCC_WGI_reference_regions_v4, CRSobj = PROJ)
#Countries for basemap
countries  <- rworldmap::getMap("less islands")
countries  <- sp::spTransform(countries,  CRSobj = PROJ)
#Transform proxy projections
pointData <- data.frame(longitude=c(proxyDf$longitude),latitude=c(proxyDf$latitude))
pointData <- spTransform(SpatialPointsDataFrame(coords=pointData,data = pointData, proj4string = CRS(PROJorig)),CRSobj = PROJ)
proxyDf$lonsPrj <- pointData@coords[,1]
proxyDf$latsPrj <- pointData@coords[,2]
save     <- TRUE
var      <- 'HC'
specific <- TRUE
if (save){ print(paste0("save ",var," figs"))
} else{    print(paste0("plot ",var," figs"))}
figFont <- 'Times New Roman'
figText <- 10
figSize <- c(6.5,3)
plotSettings <- vector(mode='list')
Csettings <- c("#92C5DE","#4393C3",'#2166AC')
if (var == 'HC'){
if(specific){
plotSettings$names <- sort(unique(proxyDf$CategorySpec))
#https://carto.com/carto-colors/
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="Glacier Ice (Accumulation)")] <- "#5F4690" #"powder blue"
plotSettings$color[which(plotSettings$names=="Shoreline (Lake Level)")]  <- "#38A6A5" #"corn flower blue"
plotSettings$color[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- "#1D6996" #"dark blue"
plotSettings$color[which(plotSettings$names=="Leaf Wax (δD)")]           <- "#94346E" # "dark orchid" #δ
plotSettings$color[which(plotSettings$names=="Other (calibrated)")]      <- "grey40" #"grey40"
plotSettings$color[which(plotSettings$names=="Other (not calibrated)")]  <- "grey" #"grey"
plotSettings$color[which(plotSettings$names=="Pollen (calibrated)")]     <- "#0F8554" #"forest green"
plotSettings$color[which(plotSettings$names=="Pollen (not calibrated)")] <- "#73AF48" #"" #"yellowgreen"
plotSettings$color[which(plotSettings$names=="Speleothem (other)")]      <- "#EDAD08" #"darkorange"
plotSettings$color[which(plotSettings$names=="Speleothem (δ13C)")]       <- "#E17C05" #"lightcoral"
plotSettings$color[which(plotSettings$names=="Speleothem (δ18O)")]       <- "#CC503E" #"firebrick"
#
plotSettings$shape <- as.character(plotSettings$names)
plotSettings$shape[which(plotSettings$names=="Glacier Ice (Accumulation)")] <- 12
plotSettings$shape[which(plotSettings$names=="Shoreline (Lake Level)")]  <- 21
plotSettings$shape[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- 15
plotSettings$shape[which(plotSettings$names=="Leaf Wax (δD)")]           <- 5
plotSettings$shape[which(plotSettings$names=="Other (calibrated)")]      <- 6
plotSettings$shape[which(plotSettings$names=="Other (not calibrated)")]  <- 13
plotSettings$shape[which(plotSettings$names=="Pollen (calibrated)")]     <- 14
plotSettings$shape[which(plotSettings$names=="Pollen (not calibrated)")] <- 1
plotSettings$shape[which(plotSettings$names=="Speleothem (other)")]      <- 17
plotSettings$shape[which(plotSettings$names=="Speleothem (δ13C)")]       <- 23
plotSettings$shape[which(plotSettings$names=="Speleothem (δ18O)")]       <- 11
} else{
plotSettings$names <- sort(unique(proxyDf$Category))
#
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="Glacier Ice")]             <- "powder blue"
plotSettings$color[which(plotSettings$names=="Shoreline")]               <- "corn flower blue"
plotSettings$color[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- "dark blue"
plotSettings$color[which(plotSettings$names=="Leaf Wax (δD)")]           <- "dark orchid"
plotSettings$color[which(plotSettings$names=="Other")]                   <- "grey"
plotSettings$color[which(plotSettings$names=="Pollen")]                  <- "forest green"
plotSettings$color[which(plotSettings$names=="Speleothem")]              <- "firebrick"
#
plotSettings$shape <- as.character(plotSettings$names)
plotSettings$shape[which(plotSettings$names=="Glacier Ice")]             <- 12
plotSettings$shape[which(plotSettings$names=="Shoreline")]               <- 21
plotSettings$shape[which(plotSettings$names=="Lake Sediment (δ18O)")]    <- 15
plotSettings$shape[which(plotSettings$names=="Leaf Wax (δD)")]           <- 5
plotSettings$shape[which(plotSettings$names=="Other")]                   <- 13
plotSettings$shape[which(plotSettings$names=="Pollen")]                  <- 14
plotSettings$shape[which(plotSettings$names=="Speleothem")]              <- 11
}
} else if (var == 'T'){
plotSettings$names <- sort(unique(proxyDf$Category))
#
plotSettings$color <- as.character(plotSettings$names)
plotSettings$color[which(plotSettings$names=="alkenone")]          <- "tomato"
plotSettings$color[which(plotSettings$names=="biophysical")]       <- "skyblue4"
plotSettings$color[which(plotSettings$names=="chironomid")]        <- "firebrick"
plotSettings$color[which(plotSettings$names=="isotope")]           <- "orange"
plotSettings$color[which(plotSettings$names=="Mg/Ca")]             <- "midnight blue"
plotSettings$color[which(plotSettings$names=="other biomarker")]   <- "medium blue"
plotSettings$color[which(plotSettings$names=="other ice")]         <- "powder blue"
plotSettings$color[which(plotSettings$names=="other microfossil")] <- "plum4"
plotSettings$color[which(plotSettings$names=="pollen")]            <- "forest green"
#
plotSettings$color[which(plotSettings$names=="alkenone")]          <- 22
plotSettings$color[which(plotSettings$names=="biophysical")]       <- 1
plotSettings$color[which(plotSettings$names=="chironomid")]        <- 30
plotSettings$color[which(plotSettings$names=="isotope")]           <- 15
plotSettings$color[which(plotSettings$names=="Mg/Ca")]             <- 25
plotSettings$color[which(plotSettings$names=="other biomarker")]   <- 13
plotSettings$color[which(plotSettings$names=="other ice")]         <- 12
plotSettings$color[which(plotSettings$names=="other microfossil")] <- 5
plotSettings$color[which(plotSettings$names=="pollen")]            <- 14
}
plotSettings$shape <- as.numeric(plotSettings$shape)
#Summarize metadata by category
pivot <- proxyDf %>%
group_by(CategorySpec) %>%
dplyr::summarize(count =  n(),
ageRange     = median(ageRange),
ageRes       = median(ageRes),
ageCtrlN     = median(ageCtrlN,na.rm=TRUE),
ageCtrlMax   = median(ageCtrlMax,na.rm=TRUE),
pctChronData = NA)
#Manually change rows to desired order
pivot <- pivot[c(1,2,3,6,7,8,11,10,9,4,5),]
#Add "All" row
pivot[12,] <- proxyDf %>%
dplyr::summarize(CategorySpec='All', count =  n(),
ageRange     = median(ageRange),
ageRes       = median(ageRes),
ageCtrlN     = median(ageCtrlN,na.rm=TRUE),
ageCtrlMax   = median(ageCtrlMax,na.rm=TRUE),
pctChronData = NA)
#Calc % of records with age control
summary <- proxyDf[which(!is.na(proxyDf$ageCtrlMax)),]
summary <- summary[which(summary$archive %in% c('Wood','GlacierIce') == FALSE),]
summary <- summary[which(summary$Category != 'Shoreline'),]
diff    <- as.character(round(100*(length(which(proxyDf$archive %in% c('Wood','GlacierIce'))
+ which(proxyDf$Category == 'Shoreline')))/nrow(proxyDf)))
pivot[12,'pctChronData'] <- as.character(round(100*nrow(summary)/nrow(proxyDf)))
pivot[12,'pctChronData'] <- paste0(pivot[12,'pctChronData'],'+',diff)
summary <- summary %>% group_by(CategorySpec) %>% dplyr::summarize(count =  n())
for (cat in summary$CategorySpec){
n   = summary[which(summary$CategorySpec==cat),2]
pct = 100*n/pivot[which(pivot$CategorySpec==cat),'count']
pivot[which(pivot$CategorySpec==cat),'pctChronData'] <- as.character(round(pct))
}
pivot
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
basemap
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap)
?ggplot
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap,devide='png)
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap,devide='png')
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap,device='png')
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap,device='png')
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap)
fig1 <- ggarrange(proxyMapSites+
theme(legend.position = c(0.07,0.3)),
plotTime+
theme(legend.position = 'none'),
ncol=1, widths=c(6), heights=c(3.5,1.5), padding=0)
fig1 <- ggarrange(proxyMapSites+
theme(legend.position = c(0.1,0.3)),
plotTime+
theme(legend.position = 'none'),
ncol=1, widths=c(6), heights=c(3.5,1.5), padding=0)
fig1 <- ggarrange(proxyMapSites+
theme(legend.position = c(0.1,0.3)),
plotTime+
theme(legend.position = 'none',
plot.margin = unit(c(0.3, 0.1, 0.1, 0.3), "in")),
ncol=1, widths=c(6), heights=c(3.5,1.5), padding=0)
fig1 <- ggarrange(proxyMapSites+
theme(legend.position = c(0.1,0.3)),
plotTime+
theme(legend.position = 'none',
plot.margin = unit(c(0.1, 0.2, 0.1, 0.2), "in")),
ncol=1, widths=c(6), heights=c(3.5,1.5), padding=0)
?plot.margin
fig1 <- ggarrange(proxyMapSites+
theme(legend.position = c(0.1,0.3)),
plotTime+
theme(legend.position = 'none',
plot.margin = unit(c(0.1, 0.3, 0.1, 0.3), "in")),
ncol=1, widths=c(6), heights=c(3.5,1.5), padding=0)
fig1 <- ggarrange(proxyMapSites+
theme(legend.position = c(0.1,0.3)),
plotTime+
theme(legend.position = 'none',
plot.margin = unit(c(0.1, 0.3, 0.1, 0.3), "in")),
ncol=1, widths=c(6), heights=c(3.5,1.5), padding=0)
#### BaseMap
#Create Plot
basePlot <- ggplot(proxyDf)+
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme_bw()+
theme(text = element_text(family=figFont,size=figText),
plot.background = element_rect(fill = 'White',color='Black'),
plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "in"),
legend.key.height = unit(0.12, "in"),
legend.key.width = unit(0.1, "in"),
legend.title = element_blank(),
legend.position = 'none')
#BaseMap
IPCC <- TRUE
basemap <- ggplot() +
borders(aggregate(refregions, FUN=length), fill=NA, color='black', size=2) +
geom_map(data=refregions, map=fortify(refregions),
aes(x=long, y=lat, group=group, map_id=id), fill="white", color="white", size=1)+
geom_map(data=countries,  map=fortify(countries),
aes(x=long, y=lat, group=group, map_id=id), fill ="grey80",color="grey90",size=0.2) +
coord_fixed(1) +
theme_void()
if (IPCC){
basemap <- basemap +
geom_map(data=subset(refregions, Acronym %in% proxyDf$ipccReg),
map=fortify(subset(refregions, Acronym %in% proxyDf$ipccReg)),
aes(x=long, y=lat, group=group, map_id=id),
alpha=0.75, size=0.3, color='black' , fill=NA,linetype = "dashed")
}
plot(basemap)
plotData <- proxyDf[,'ageRes']
binsize <- 50
plotRes <- basePlot+
geom_vline( xintercept=median(plotData), size=0.8) +
#geom_vline(xintercept=mean(  plotData), size=0.8, linetype=2) +
geom_histogram(aes(plotData, fill=CategorySpec), color='Black', alpha=0.7,
breaks = c(0,binsize/2,seq(binsize,max(plotData,na.rm=TRUE)+binsize,binsize))) +
scale_fill_manual(values=plotSettings$color) +
scale_x_continuous(name=paste0("Median Proxy Sample Resolution (binwidth = ",binsize," years)") ,
limits=c(0,max(plotData,na.rm=TRUE)+binsize/2), expand=c(0,0),
breaks=seq(0,max( plotData,na.rm=TRUE),300)) +
scale_y_continuous(name="Count of Records", oob=scales::squish, limits=c(0,150), expand=c(0,0))+
theme(legend.position = c(0.8,0.5))
plotRes
if (save) {
ggsave(plot=plotRes, width = figSize[1], height = figSize[2], units='in', dpi = 600,
filename = file.path(wd,"Figures","Proxy","PlotProxyAgeRes.png"))
}
