#Load packages
import pyleoclim as pyleo               # Packages for analyzing LiPD files 
#import lipd                             # Packages for analyzing LiPD files 
import numpy  as np                     # Package with useful numerical functions
import xarray as xr                     #Package for handling file types
import pandas as pd
#import math
from scipy import stats                 # Packages for calculations  
import pymannkendall as mk              # Package for trend detection
import matplotlib.pyplot as plt         # Packages for making figures
#import matplotlib as mpl 
import matplotlib.gridspec as gridspec
#import matplotlib.colors as pltcolors
#from mpl_toolkits.axes_grid1.inset_locator import inset_axes
import cartopy.crs as ccrs              # Packages for mapping in python
import cartopy.feature as cfeature
#import cartopy.util as cutil
#
dataDir='/Volumes/GoogleDrive/My Drive/zResearch/Data/'
save=False
gitHub ='/Volumes/GoogleDrive/My Drive/zResearch/HoloceneHydroclimate/'
#%%
#Load Model Data
#
#Set time variables and resolution of data
ageMin=0; ageMax=12000; ageRes=100
timebin = [*range(ageMin,ageMax+1,ageRes)]

#Model variable names and conversion to common time/variable units (generally mm/day)
modelKey = {'trace':{'lat':'lat','lon':'lon',
                     'Time':{'varName':'time','conversion':[-1000,0]}, #To 0-12ka Holocene
                     'Precip':{'varName':'PRECT','conversion':[(60*60*24*1000),0]}, #converts m/s to mm/day
                     'Evap':{'varName':'QFLX','conversion':[((1/1000)*(60*60*24*1000)),0]}, #converts kg/m2/s to m/s to mm/day
                     'Temp':{'varName':'TREFHT','conversion':[1,-273.15]}}, #converts K to degC
            'hadcm':{'lat':'latitude','lon':'longitude',
                     'Time':{'varName':'t','conversion':[-1,2000]}, #To 0-12ka Holocene
                     'Precip':{'varName':'precip_mm_srf','conversion':[((1/1000)*(60*60*24*1000)),0]}, #converts kg/m2/s to m/s to mm/day
                     'Evap':{'varName':'totalEvap_mm_srf','conversion':[1,0]}, #already in mm/day
                     'Temp':{'varName':'temp_mm_1_5m','conversion':[1,-273.15]}}} #converts K to degC
dataModel = {}
for model in modelKey:
    dataModel[model] = {}
    data = xr.open_dataset(dataDir['model']+model+'/PRECIP_ann.nc',decode_times=False)
    dataModel[model]['lat']  = data[modelKey[model]['lat']].values
    dataModel[model]['lon']  = data[modelKey[model]['lon']].values
    dataModel[model]['lon']  = xr.where(dataModel[model]['lon'] > 180,dataModel[model]['lon'] - 360,dataModel[model]['lon'])
    dataModel[model]['time'] = timebin
    for variable in ['Precip','Evap']: #',Temp'
        modelData[model][variable] = {}
        for season in ['ann','djf','jja']:
             print(variable+season)
             data = xr.open_dataset(dataDir['model']+model+'/'+variable+'_'+season+'.nc',decode_times=False)
             modeltime   = data[modelKey[model]['Time']['varName']]
             modeltime   = modeltime.values*(modelKey[model]['Time']['conversion'][0])+modelKey[model]['Time']['conversion'][1] 
             modelvalues = data[modelKey[model][variable]['varName']]
             modelvalues = modelvalues.values*(modelKey[model][variable]['conversion'][0])+modelKey[model][variable]['conversion'][1]              
             if model == 'hadcm': modelvalues = modelvalues[:,0,:,:]
             modelvalues = pd.DataFrame([list(modeltime),list(modelvalues)]).transpose() 
             modelvalues.columns = ['time','values']
             binvalue = []
             for timeslice in timebin: binvalue.append(np.mean(modelvalues.loc[(modelvalues['time'] >= timeslice-ageRes/2) & (modelvalues['time'] < (timeslice+ageRes/2))]['values']))
             modelData[model][variable][season] = np.dstack(binvalue)
    modelData[model]['EffM'] = {}
    for season in ['ann','djf','jja']:
        modelData[model]['EffM'][season] = modelData[model]['Precip'][season] - modelData[model]['Evap'][season] 
#

